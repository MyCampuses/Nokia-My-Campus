{"version":3,"sources":["assets/campus_map_P10.webp","assets/campus_map_P5.webp","hooks/LocalStorageOperations.js","styles/appColors.js","styles/muiThemes.js","localization.js","hooks/ApiUrls.js","hooks/GlobalFunctions.js","hooks/ApiHooks.js","views/login.js","hooks/Authentication.js","hooks/Logout.js","fragments/TopNavigationBarFragment.js","styles/authLoadingStyle.js","views/authLoading.js","fragments/ProgressBarFragments.js","hooks/Data.js","hooks/HeatMapActions.js","fragments/HeatMap.js","views/home.js","styles/infoStyles.js","views/info.js","styles/commonStyles.js","fragments/ChartFragments.js","fragments/TabFragments.js","views/p10MapView.js","views/p5MapView.js","views/restaurantHeatMap.js","fragments/BottomBarFragment.js","styles/progressBarStyle.js","views/p5.js","views/p10.js","views/restaurant.js","views/forgotPass.js","views/register.js","views/resetPassword.js","views/accountVerification.js","hooks/Routes.js","views/UpdateDialog.js","hooks/UpdateServiceWorker.js","Update.js","App.js","serviceWorker.js","hooks/HeatMapReducer.js","hooks/UpdateReducer.js","hooks/RootReducer.js","index.js","assets/logo_mycampus.webp"],"names":["module","exports","LocalStorageOperations","myStorage","window","localStorage","create","data","key","setItem","read","item","getItem","JSON","parse","del","removeItem","clear","Colors","NokiaBlue","LightBlue","blue","MuiThemes","FormTheme","createMuiTheme","palette","primary","main","secondary","typography","fontSize","button","overrides","MuiOutlinedInput","root","position","borderColor","borderWidth","input","WebkitBoxShadow","WebkitTextFillColor","MuiInputBase","color","MuiFormLabel","MuiButton","containedPrimary","marginTop","fullWidth","backgroundColor","MuiCheckbox","colorPrimary","MuiTypography","body1","PageTheme","flexGrow","h3","marginBlockStart","marginBlockEnd","MuiLinearProgress","height","maxHeight","borderRadius","width","barColorPrimary","MuiGrid","display","justifyContent","alignItems","padding","margin","MuiContainer","paddingLeft","paddingRight","setBackgroundBlue","document","getElementById","style","backgroundSize","backgroundRepeat","strings","LocalizedStrings","en","signIn","signUp","emailAddress","username","password","confirmPassword","rememberMe","forgotPass","noAccount","welcome","logoAlt","validEmail","enterEmail","send","joinPlatform","backToLogin","usernameError","passwordError","pleaseEnterEmail","pleaseEnterConfirmPass","pleaseEnterPassword","pleaseEnterName","waitTime1","waitTime2","waitTime3","waitTime4","waitTime5","restaurantPageTitle","p10PageTitle","live","history","pleaseEnterUsername","topBarMenuItemHome","topBarMenuItemRestaurant","topBarMenuItemP5","topBarMenuItemP10","topBarMenuItemInfo","topBarMenuItemLogout","infoPageHeading","infoPageP1","infoPageP2","liveUtilization","insideLevelsP5","insideLevels","roofTopLevels","roofTopElectricPlaces","p10MapAlt","p5MapAlt","map","p10electric","p10inside","p10rooftop","p5inside","fillRate","resetToken","resetPasswordText","inside","rooftop","electric","p10insideutil","p10rooftoputil","p10electricutil","level","passwordWasReset","requestError","graph","verificationToken","resend","passwordLengthError","cannotBeEmpty","userVerification","sentVerification","registeringSuccess","toConfirmation","toPasswordReset","lines","currentStatsAre","fi","se","ApiUrls","apiUrl","loginUrl","regUrl","restaurantUrl","parkingP10Url","parkingP5Url","parkingP10TopUrl","restaurantQueueUrl","selectDate","locUrl","loc","date","dailyParkingUrl","dailyRestaurantUrl","forgotPassUrl","resendVerificationUrl","resetPassUrl","confirmUrl","heatMapUrl","GlobalFunctions","onItemClickNavigate","url","undefined","location","href","convertTime","timestamp","Date","formattedDate","format","formattedFullDate","thisDate","fetchPostUrl","a","fetch","method","headers","body","stringify","response","json","fetchPostUrlNoJson","fetchGetUrl","userKey","userToken","authorization","token","Error","API","loginAsync","loginData","props","resetPasswordAsync","confirmAccountAsync","resendEmailAsync","forgotPassAsync","getUsageData","then","registerAsync","registerData","getUsageDataNoProps","getChartData","dataToChart","chart","timeStamp","tempJson","x","y","percent","pv","push","chartEstData","dataToChartRestaurant","fill_percent","Login","useState","email","setEmail","setPassword","redirectFromLogin","Authentication","useEffect","ThemeProvider","theme","Container","component","maxWidth","className","noValidate","onSubmit","evt","preventDefault","result","errors","alert","msg","src","require","alt","Typography","paddingTop","variant","TextField","required","id","label","name","onChange","event","target","value","autoComplete","autoFocus","type","Button","Grid","xs","Link","onClick","isLoggedIn","checkIfLogged","login","redirectToLogin","checkLogged","page","Logout","removeToken","useStyle","makeStyles","frag","toolBar","spacing","paddingBottom","appBar","iconButton","logo","marginRight","menu","edge","rightToolbar","marginLeft","NaviBar","TopNavigationBar","classes","anchorEl","setAnchorEl","AppBar","Toolbar","IconButton","aria-controls","aria-haspopup","currentTarget","Menu","elevation","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","keepMounted","open","Boolean","onClose","MenuItem","AuthLoadingStyles","centered","textAlign","right","top","left","bottom","AuthLoading","CircularProgress","ProgressBarFragments","HomeProgressBar","LinearProgress","ProgressBar","barData","navigationUrl","container","barTheme","progressLabel","direction","justify","labelLocation","barLabel","utilization","Data","Map","times","colours","SW_INIT","SW_UPDATE","SW_CONFIRM","FETCH_HEATMAP_SUCCESS","FETCH_HEATMAP_BEGIN","FETCH_HEATMAP_FAILURE","fetchHeatMap","dispatch","res","ok","statusText","handleErrors","blob","mapURL","URL","createObjectURL","payload","heatmap","catch","error","fetchHeatMapFailure","connect","state","HeatMapReducer","loading","interval","setInterval","clearInterval","message","alignSelf","Home","restaurantData","setRestaurantData","parkingP5Data","setParkingP5Data","parkingP10Data","setParking10Data","parkingP10TopData","setParkingP10TopData","parkingP10ElectricData","setParkingP10ElectricData","HomePage","colorB","headLine","marginBottom","zIndex","useStyles","restaurantBarData","p5BarData","p10insideData","p10roofData","p10electricData","AuthHome","InfoStyles","infoStyle","border","Info","InfoPage","AuthInfo","commonStyles","bottomTabs","background","p5Box","p10Box","RestaurantBox","ChartFragment","Chart","propsDate","chartData","setChartData","dataForRender","setDataForRender","ticksForRender","setTicksForRender","max","setMax","samples","maxValue","ticks","filterTime","element","sortCompareFunction","b","getAverage","x1","x2","checkIfMissingTime","index","lastIndex","prevElement","checkIfMissingTimeRestaurant","tempChartData","filter","fixTimesArray","array","returnArray","tempArray","highest","i","length","dataObject","concat","sort","fixTimes","domain","scaleTime","utcHour","every","time","minWidth","minHeight","stroke","strokeDasharray","dataKey","fill","allowDataOverflow","tickSize","values","unit","TabFragments","DatePickerTheme","TabFragmentHistory","children","other","selectedDate","setSelectedDate","selectedLevel","setSelectedLevel","LevelSelector","FormControl","InputLabel","Select","labelId","handleChange","role","hidden","aria-labelledby","inputstyle","utils","DateFnsUtils","disableFuture","onDateChange","KeyboardButtonProps","TabFragmentLive","p10electicData","TabFragmentLiveP5","TabFragmentHistoryP5","TabRestaurantLines","queueTimes","setQueueTimes","getQueueTimes","set","Box","keys","mapKey","get","p","m","bgcolor","parseInt","queue_time","TabRestaurantChart","P10MapView","P5MapView","RestaurantHeatMapView","BottomBarTabFragment","commonClasses","P10BottomTab","setValue","setDate","handleDateChange","tabHistory","useMemo","Tabs","newValue","indicatorColor","Tab","P5BottomTab","valueP5","setValueP5","tabHistoryP5","tabLiveP5","RestaurantBottomTab","valueRestaurant","setValueRestaurant","ProgressBarStyle","P5P10ProgressBar","P5","P5Page","AuthP5","P10","P10Page","AuthP10","Restaurant","RestaurantPage","AuthRestaurant","ForgotPassword","handleSubmit","submitData","status","navigate","Register","btnDisable","setBtnDisable","formData","setFormData","emailError","confirmPasswordError","formErrors","setFormErrors","formErrorMessages","setFormErrorMessages","enableSubmit","resetTokenError","updateErrorMsg","updateError","bool","updateField","e","onBlur","helperText","test","pwdError","confPwdError","disabled","errorStr","ResetPassword","useQueryParams","queryParams","passwordConfirm","AccountVerification","setToken","user","routes","UpdateDialog","params","onUpdate","UpdateApp","useDispatch","timer","setTimeout","clearTimeout","Update","isServiceWorkerInitialized","useSelector","UpdateReducer","serviceWorkerInitialized","isServiceWorkerUpdated","serviceWorkerUpdated","serviceWorkerRegistration","registrationWaiting","waiting","postMessage","addEventListener","reload","updateServiceWorker","App","routeResult","useRoutes","isLocalhost","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onSuccess","combineReducers","action","store","createStore","RootReducer","applyMiddleware","thunk","ReactDOM","render","CssBaseline","process","origin","contentType","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f9cc8449.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/campus_map_P10.4a2c0449.webp\";","module.exports = __webpack_public_path__ + \"static/media/campus_map_P5.dc26fde9.webp\";","// Functions used with Local storage\nconst LocalStorageOperations=()=> {\n\n    const myStorage = window.localStorage;\n\n    // Add a new data,key value\n    const create = (data,key) =>{\n        myStorage.setItem(key,data);\n    };\n\n    // Get an item/data corresponding the key\n    const read = (key) =>{\n        let item = myStorage.getItem(key);\n        return JSON.parse(item)\n    };\n\n    const del = (key) =>{\n        myStorage.removeItem(key);\n    };\n\n    const clear = () =>{\n      myStorage.clear();\n    };\n\n    return {\n        create,\n        read,\n        del,\n        clear\n    }\n};\n\nexport default LocalStorageOperations\n","/*\n    This file can be used to change the colors of different colors in the\n    App. Right now these are used in progress bars and bottom tabs\n*/\n\nimport {blue} from \"@material-ui/core/colors\";\n\nconst Colors = () => {\n\n    const NokiaBlue = '#124191';\n    const LightBlue = blue[300];\n\n\n    return {\n        NokiaBlue:NokiaBlue,\n        LightBlue: LightBlue\n    }\n};\n\n\nexport default Colors\n","/*\n    Contains the Theme used in all the forms in the application and the function\n    to set the background for login,register and forgot password\n */\nimport {createMuiTheme} from \"@material-ui/core\";\nimport {blue} from \"@material-ui/core/colors\";\nimport Colors from \"./appColors\";\n\nconst MuiThemes = () => {\n\n    const {NokiaBlue, LightBlue} = Colors();\n    // Controls the Login, Register and Forgot Password page backgrounds.\n    // Can be used to set either background color or image for example.\n    // Background image behaviour is buggy atm so using a solid color instead for now\n    const setBackgroundBlue = () => {\n        let root = document.getElementById('root-body');\n        root.style.backgroundColor=\"#0d47a1\"\n        root.style.backgroundSize = \"cover\";\n        root.style.backgroundRepeat = \"no-repeat\";\n    };\n\n    const FormTheme = createMuiTheme({\n        palette: {\n            primary: {\n                main: blue[200],\n            },\n            secondary: {\n                main: blue[50],\n            },\n        },\n        typography: {\n            fontSize: 12,\n            button: {\n                fontSize: 16,\n            },\n        },\n        overrides: {\n            MuiOutlinedInput: {\n                root: {\n                    position: 'relative',\n                    '& $notchedOutline': {\n                        borderColor: blue[50],\n                    },\n                    '&:hover:not($disabled):not($focused):not($error) $notchedOutline': {\n                        borderColor: blue[50],\n                        // Reset on touch devices, it doesn't add specificity\n                        '@media (hover: none)': {\n                            borderColor: blue[50],\n                        },\n                    },\n                    '&$focused $notchedOutline': {\n                        borderColor: blue[50],\n                        borderWidth: 1,\n                    },\n                },\n                input:{\n                    '&:-webkit-autofill':{\n                        WebkitBoxShadow: '0 0 0 100px #0d47a1  inset',\n                        WebkitTextFillColor: blue[50]\n                    },\n                }\n            },\n            MuiInputBase:{\n                input:{\n                    color:blue[50],\n                }\n            },\n            MuiFormLabel: {\n                root: {\n                    // \"&$focused\": {\n                    color: blue[50],\n                    // }\n                },\n            },\n            MuiButton: {\n                containedPrimary: {\n                    color: blue[800],\n                    marginTop: '0.5em',\n                },\n                fullWidth:{\n                    backgroundColor:blue[50]\n                }\n            },\n            MuiCheckbox:{\n                colorPrimary:{\n                    color:blue[50]\n                },\n            },\n            MuiTypography:{\n                body1:{\n                    color:blue[50]\n                }\n            },\n        },\n    });\n\n    // MUI theme for Home, Restaurant, P5 & P10\n    const PageTheme = createMuiTheme({\n        flexGrow: 1,\n        overrides: {\n\n            h3:{\n                marginBlockStart: 0,\n                marginBlockEnd:0\n            },\n            MuiLinearProgress: {\n                root: {\n                    height: '14vh',\n                    maxHeight: '100px',\n                    borderRadius: '10px',\n                    width: '100%',\n                },\n                colorPrimary:{\n                    backgroundColor: NokiaBlue\n                },\n                barColorPrimary:{\n                    backgroundColor: LightBlue\n                }\n            },\n            MuiTypography:{\n              body1:{\n                  color:\"white\"\n              }\n            },\n            MuiGrid: {\n                root: {\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                },\n                'spacing-xs-1': {\n                    padding: '0px',\n                    margin: '0px',\n                    width: '100%',\n                },\n            },\n            MuiContainer: {\n                root: {\n                    paddingLeft: '4px',\n                    paddingRight: '4px',\n                },\n            },\n        },\n    });\n\n\n    return{\n        PageTheme: PageTheme,\n        FormTheme:FormTheme,\n        setBackgroundBlue:setBackgroundBlue\n    }\n};\n\nexport default MuiThemes\n","/*\n    This file contains all the localized strings in the app.\n    Current Languages: Fi, En, Se.\n*/\nimport LocalizedStrings from 'react-localization'\nlet strings = new LocalizedStrings({\n    en:{\n        signIn: \"Sign In\",\n        signUp: \"Sign Up\",\n        emailAddress: \"Email Address\",\n        username: \"Username\",\n        password: \"Password\",\n        confirmPassword: \"Confirm Password\",\n        rememberMe: \"Remember Me\",\n        forgotPass: \"Forgot Password?\",\n        noAccount: \"Don't have an account? Sign Up\",\n        welcome: \"Welcome to the progressive web application that provides information about current status of three most popular areas in Nokia HQ, Espoo\",\n        logoAlt: \"MyCampus Logo\",\n        validEmail: \"Please enter a valid email\",\n        enterEmail: \"Enter the email you want the password to be reset and click send\",\n        send: \"Send\",\n        joinPlatform: \"Join Nokia MyCampus platform\",\n        backToLogin: \"Back to Login\",\n        usernameError: \"Username must be between 2-20 characters\",\n        passwordError: \"Passwords don't match\",\n        pleaseEnterEmail: \"Please enter an email\",\n        pleaseEnterConfirmPass: \"Please enter password confirmation\",\n        pleaseEnterPassword: \"Please enter an password\",\n        pleaseEnterName: \"Please enter a name\",\n        waitTime1: \"wait time < 30s\",\n        waitTime2: \"wait time < 1m\",\n        waitTime3: \"wait time < 1m 30s\",\n        waitTime4: \"wait time < 2m\",\n        waitTime5: \"wait time > 2m\",\n        restaurantPageTitle: \"Queue wait times\",\n        p10PageTitle: \"P10\",\n        live: \"Live\",\n        history: \"History\",\n        pleaseEnterUsername: \"Please enter an username\",\n        topBarMenuItemHome: \"Home\",\n        topBarMenuItemRestaurant: \"Restaurant\",\n        topBarMenuItemP5: \"P5\",\n        topBarMenuItemP10: \"P10\",\n        topBarMenuItemInfo: \"Info\",\n        topBarMenuItemLogout: \"Logout\",\n        infoPageHeading: \"MyCampus is an application for Nokia employees providing specific data from Espoo Nokia Campus. \" +\n            \"Start up named Levitezer, in co-operation with Nokia, has been creating MyCampus. \" +\n            \"Students from Metropolia University of Applied Sciences have been creating the mobile application.\",\n        infoPageP1: \"Thermal Camera sensors cover Midpoint staff restaurant. In the application, utilization rate, \" +\n            \"queue time length and historical data of utilization for the restaurant is available.\",\n        infoPageP2: \"In parking P5 and P10 several different sensors detect cars driving in and out. This enables application to show fill rate of parking and also show if there are\\n\" +\n            \"\\n\" +\n            \"any available e-car charging stations at the rooftop of P10.  For new ideas please contact: mikael.lindblad@nokia.com\",\n        liveUtilization: \"Live Utilization\",\n        insideLevelsP5: \"Inside levels of P5\",\n        insideLevels: \"Inside levels\",\n        roofTopLevels: \"Rooftop level\",\n        roofTopElectricPlaces: \"Rooftop electric places (est)\",\n        p10MapAlt: \"P10 Map\",\n        p5MapAlt:\"P5 Map\",\n        map: \"Map\",\n        p10electric: \"P10 Rooftop Electric (est.)\",\n        p10inside: \"P10 Inside\",\n        p10rooftop:\"P10 Rooftop\",\n        p5inside: \"P5 Inside\",\n        fillRate: \"Fill Rate\",\n        resetToken:\"Reset Token\",\n        resetPasswordText: \"Enter the Email, New Password and the Reset Token you got to change to a new Password\",\n        inside:\"Inside\",\n        rooftop:\"Rooftop\",\n        electric: \"Electric(est.)\",\n        p10insideutil: \"Inside Utilization\",\n        p10rooftoputil:\"Rooftop Utilization\",\n        p10electricutil:\"Electric Utilization(est.)\",\n        level:\"Level\",\n        passwordWasReset: \"Password changed successfully\",\n        requestError: \"Something went wrong with your request. Please try again.\",\n        graph: \"Graph\",\n        verificationToken: \"Verification Token\",\n        resend: \"Resend Verification Email\",\n        passwordLengthError: \"Password must be at least 5 characters long\",\n        cannotBeEmpty: \"Field cannot be blank\",\n        userVerification: \"Use the verification code you have received in your email. If it has not arrived in the inbox be sure to check deleted/spam folder.\",\n        sentVerification: \"You can now check your email for a verification code.\",\n        registeringSuccess: \"Registration was successful. The verification code has been sent to your email\",\n        toConfirmation: \"Account Confirmation\",\n        toPasswordReset: \"To password reset\",\n        lines: \"Lines\",\n        currentStatsAre: \"Current campus statistics are:\"\n\n    },\n\n    fi:{\n        signIn: \"Kirjaudu\",\n        signUp: \"Rekisteröidy\",\n        emailAddress: \"Sähköposti\",\n        username: \"Käyttäjänimi\",\n        password: \"Salasana\",\n        confirmPassword: \"Varmista salasana\",\n        rememberMe: \"Muista minut\",\n        forgotPass: \"Unohtuiko salasana?\",\n        noAccount: \"Ei käyttäjätiliä? Rekisteröidy\",\n        welcome: \"Tervetuloa MyCampus-sovellukseen, joka tarjoaa tietoa Nokian Karamalmin kampuksen P5 ja P10 -parkkitilojen, sekä ravintolan käyttötilanteesta.\",\n        logoAlt: \"MyCampus Logo\",\n        validEmail: \"Syötä sähköposti\",\n        enterEmail: \"Syötä sähköposti jonka salasanan tahdot resetoida ja paina lähetä\",\n        send: \"Lähetä\",\n        backToLogin:\"Takaisin Kirjautumiseen\",\n        joinPlatform: \"Liity Nokia MyCampus -alustalle\",\n        usernameError: \"Käyttäjänimen tulee olla 2-20 merkkiä pitkä\",\n        passwordError: \"Salasanat eivät täsmää\",\n        pleaseEnterEmail: \"Syötä sähköposti\",\n        pleaseEnterConfirmPass: \"Syötä salasanan vahvistus\",\n        pleaseEnterPassword: \"Syötä salasana\",\n        pleaseEnterUsername: \"Syötä käyttäjänimi\",\n        pleaseEnterName: \"Syötä nimi\",\n        waitTime1: \"jonotusaika < 30s\",\n        waitTime2: \"jonotusaika < 1m\",\n        waitTime3: \"jonotusaika < 1m 30s\",\n        waitTime4: \"jonotusaika < 2m\",\n        waitTime5: \"jonotusaika > 2m\",\n        restaurantPageTitle: \"Jonotusajat\",\n        p10PageTitle: \"P10\",\n        live: \"Live\",\n        history: \"Vanha Data\",\n        topBarMenuItemHome: \"Koti\",\n        topBarMenuItemRestaurant: \"Ravintola\",\n        topBarMenuItemP5: \"P5\",\n        topBarMenuItemP10: \"P10\",\n        topBarMenuItemLogout: \"Kirjaudu Ulos\",\n        infoPageHeading: \"MyCampus on Nokian työntekijöille tarkoitettu sovellus, joka tarjoaa tiettyä dataa Nokian Espoon kampukselta. Levitezer-niminen startup, yhteistyössä Nokian kanssa,\"+\n        \"on ollut tekemässä MyCampusta. Opiskelijat Metropolia Ammattikorkeakoulusta ovat olleet tekemässä mobiilisovellusta.\",\n        infoPageP1: \"Lämpökameroiden sensorit kattavat keskikohdan henkilöstöravintolan. Sovellus tarjoaa käyttöasteen, jonojen pituudet sekä historiallista dataa ravintolasta. \" +\n            \"Parkkipaikoilla P5 ja P10, monet eri sensorit havaitsevat sisään ja ulos ajavat autot. Sovellus pystyy tämän avulla näyttämään täyttöasteen \" +\n            \"sekä myös vapaana olevat sähköauton latauspisteet P10:n katolla.\",\n        infoPageP2:\n            \"Jos sinulla on uusia ideoita, ota yhteyttä: mikael.lindblad@nokia.com.\",\n        liveUtilization: \"Nykyinen käyttöaste\",\n        insideLevelsP5: \"P5:n sisätilan tasot\",\n        insideLevels: \"Sisätilan tasot\",\n        roofTopLevels: \"Kattotaso\",\n        roofTopElectricPlaces: \"Sähköpaikat katolla (arvio)\",\n        p10MapAlt: \"P10 Kartta\",\n        p5MapAlt:\"P5 Kartta\",\n        map: \"Kartta\",\n        p10electric: \"P10 Sähköpaikat (arvio)\",\n        p10inside: \"P10 Sisätaso\",\n        p10rooftop:\"P10 kattotaso\",\n        p5inside: \"P5 Sisätaso\",\n        fillRate: \"Täyttöaste\",\n        resetToken: \"Nollaus Koodi\",\n        resetPasswordText: \"Syötä sähköposti, uusi salasanasi sekä koodi jonka sait sähköpostiisi vaihtaaksesi salasanasi\",\n        inside:\"Sisätaso\",\n        rooftop:\"Kattotaso\",\n        electric: \"Sähköpaikat (arvio)\",\n        p10insideutil: \"Sisätason käyttöaste\",\n        p10rooftoputil:\"Kattotason käyttöaste\",\n        p10electricutil:\"Sähköpaikat käyttöaste (arvio)\",\n        level:\"Taso\",\n        graph: \"Graafi\",\n        passwordWasReset: \"Salasanan vaihto onnistui!\",\n        requestError: \"Jokin meni pieleen pyynnössä. Yritä Uudelleen\",\n        verificationToken: \"Vahvistustunnus\",\n        resend: \"Lähetä Vahvistussähköposti Uudelleen\",\n        userVerification: \"Käytä vahvistuskoodiasi täällä. Vahvistuskoodin pitäisi löytyä sähköpostistasi. Muista tarkistaa myös poistetut / roskapostikansio, jos viesti ei näy pääkansiossa\",\n        sentVerification: \"Vahvistuskoodi lähetetty sähköpostiin.\",\n        passwordLengthError:\"Salasanan tulee olla vähintään 5 merkkiä\",\n        cannotBeEmpty: \"Kenttä ei saa olla tyhjä\",\n        registeringSuccess:\"Rekisteröinti onnistui, vahvistuskoodin on lähetetty sähköpostiinne\",\n        toConfirmation:\"Tilin vahvistus\",\n        toPasswordReset: \"Salasanan palautukseen\",\n        lines: \"Linjasto\",\n        currentStatsAre:\"Tämän hetken tilastot kampuksella:\"\n    },\n\n    se:{\n        signIn: \"Logga In\",\n        signUp: \"Logga Up\",\n        emailAddress: \"Epostadress\",\n        username: \"Användarnamn\",\n        password: \"Lösenord\",\n        confirmPassword: \"Bekräfta Lösenordet\",\n        rememberMe: \"Kom ihåg mig\",\n        forgotPass: \"Glömt Lösenordet?\",\n        noAccount: \"Skapa ett nytt konto\",\n        welcome: \"Välkommen till progressiva web applicationen som erbjudar information av de tre mäst populära områden på Nokia HQ, Espoo\",\n        logoAlt: \"MyCampus Logo\",\n        validEmail: \"Ange en giltig e-postadress\",\n        enterEmail: \"Ange e-postadressen vart du vill ha lösenord återställt och tryck skicka\",\n        send: \"Skicka\",\n        joinPlatform: \"Gå med Nokia MyCampus platform\",\n        backToLogin: \"Tillbaka till Login\",\n        usernameError: \"Användarnamnet måste vara mellan 2-20 tecken\",\n        passwordError: \"Lösenordet matchar inte\",\n        pleaseEnterEmail: \"Ange en giltig epostadress\",\n        pleaseEnterConfirmPass: \"Ange lösenordet igen\",\n        pleaseEnterPassword: \"Ange lösenord\",\n        pleaseEnterName: \"Ange ett namn\",\n        waitTime1: \"väntetid < 30s\",\n        waitTime2: \"väntetid < 1m\",\n        waitTime3: \"väntetid < 1m 30s\",\n        waitTime4: \"väntetid < 2m\",\n        waitTime5: \"väntetid > 2m\",\n        restaurantPageTitle: \"Kötider\",\n        p10PageTitle: \"P10\",\n        live: \"Live\",\n        history: \"Historia\",\n        pleaseEnterUsername: \"Ange ett användarnamn\",\n        topBarMenuItemHome: \"Hem\",\n        topBarMenuItemRestaurant: \"Restaurang\",\n        topBarMenuItemP5: \"P5\",\n        topBarMenuItemP10: \"P10\",\n        topBarMenuItemInfo: \"Info\",\n        topBarMenuItemLogout: \"Logga ut\",\n        infoPageHeading: \"MyCampus är en applikation för Nokia anställda som visar specifik data från Esbo Nokia Kampus.\\n\" +\n            \"    Start up nämned Levitezer i samarbete med Nokia har skapat MyCampus.\\n\" +\n            \"    Studerande från Metropolia University of Applied Sciences har varit med i skapandet av mobil applikationen\",\n        infoPageP1: \"Värmekamerasensorer täcker centern av anställdas restaurang. I applikationen finns det utnyttjandegrad, \"+\n                \"kötidslängd och historisk data för användning för restaurangen är tillgängliga.\",\n        infoPageP2: \"Vid parkering P5 och P10 upptäcker flera olika sensorer bilar som kör in och ut. Detta möjliggör applikation\\n\" +\n            \"för att visa fyllningshastighet för parkering och även visa om det finns \\n \" +\n            \"tillgängliga laddningsstationer för e-bilar på taket av P10. För nya idéer kontakta: mikael.lindblad@nokia.com\\\",\",\n        liveUtilization: \"Live Utilization\",\n        insideLevelsP5: \"Inre nivå av P5\",\n        insideLevels: \"Inre nivåer\",\n        roofTopLevels: \"Tak nivå\",\n        roofTopElectricPlaces: \"Tak elektriska platser (uppskatning)\",\n        p10MapAlt: \"P10 Karta\",\n        p5MapAlt:\"P5 Karta\",\n        map: \"Karta\",\n        p10electric: \"P10 Tak elektriska(est)\",\n        p10inside: \"P10 Inre nivåer\",\n        p10rooftop:\"P10 Tak nivå\",\n        p5inside: \"P5 Inre nivåer\",\n        fillRate: \"Fyllnadsgrad\",\n        resetToken:\"Återställnings tecken\",\n        resetPasswordText: \"Ange e-postadresset, nya lösenordet och the återställnings tecken du fick för att byta lösenordet.\",\n        inside:\"Inuti\",\n        rooftop:\"Tak\",\n        electric: \"Elektrisk(uppskatning)\",\n        p10insideutil: \"Inre Användning\",\n        p10rooftoputil:\"Tak Användning\",\n        p10electricutil:\"Elektriska Användning(uppskatning)\",\n        level:\"Nivå\",\n        graph: \"Graf\",\n        verificationToken: \"Verifikations Tecken\",\n        resend: \"Återsänd Verifikations eposten\",\n        userVerification: \"Använd verifikations koden du fått via epost. Kolla deleterade/spam foldern om du inte har fått eposten i inkorgen. \",\n        sentVerification: \"Verifikations koden har skickats till er epost.\",\n        passwordLengthError:\"Lösenorder måste vara minst 5 tecken lång\",\n        cannotBeEmpty:\"Fältet kan inte vara tom\",\n        registeringSuccess:\"Registeringen lyckades, verifikations koden har sänts till er epost\",\n        toConfirmation:\"Konto Konfirmation\",\n        toPasswordReset: \"Till lösenord återställning\",\n        lines: \"Linjer\",\n        currentStatsAre:\"Nuvarande statistik på kampus:\"\n    }\n});\n\nexport default strings;\n","/*\n    This file contains all the Urls used by the API\n*/\n\nconst ApiUrls = () => {\n  const loginUrl = 'https://mycampus-server.karage.fi/auth/login';\n  const regUrl = 'https://mycampus-server.karage.fi/auth/signup';\n  const apiUrl = 'https://mycampus-server.karage.fi/api/common/';\n  const forgotPassUrl = 'https://mycampus-server.karage.fi/auth/forgot_password';\n  const resendVerificationUrl = 'https://mycampus-server.karage.fi/auth/resend';\n  const resetPassUrl = 'https://mycampus-server.karage.fi/auth/reset_password';\n  const confirmUrl = 'https://mycampus-server.karage.fi/auth/confirmation';\n\n  const restaurantUrl = apiUrl +\n      'restaurant/Midpoint?select=fill_percent';\n  const restaurantQueueUrl = apiUrl + 'restaurant/Midpoint/queue/';\n  const dailyParkingUrl = apiUrl + 'parking/data/';\n  const dailyRestaurantUrl = apiUrl + 'restaurant/Midpoint/daily?=date=';\n  const parkingP5Url = apiUrl + 'parking/status/P5';\n  const parkingP10Url = apiUrl + 'parking/status/P10';\n  const parkingP10TopUrl = apiUrl + 'parking/status/P10TOP';\n  const heatMapUrl = apiUrl + 'restaurant/Midpoint/heatmapImage';\n\n  // Const used with Api fetch, define location and date\n  const selectDate = (locUrl, loc, date) => {\n    return locUrl + loc + '/' + date;\n  };\n\n  return {\n    loginUrl,\n    regUrl,\n    apiUrl,\n    restaurantUrl,\n    parkingP10Url,\n    parkingP5Url,\n    parkingP10TopUrl,\n    restaurantQueueUrl,\n    selectDate,\n    dailyParkingUrl,\n    dailyRestaurantUrl,\n    forgotPassUrl,\n    resendVerificationUrl,\n    resetPassUrl,\n    confirmUrl,\n    heatMapUrl\n  };\n};\nexport default ApiUrls;\n","/*\n    This file contains some functions that are being used in many parts of the app\n*/\n\nimport {format} from 'date-fns';\n\nconst GlobalFunctions = () => {\n  // Navigate to url, check routes.js for more information\n  const onItemClickNavigate = (url) => {\n    if (url !== undefined) {\n      window.location.href = url;\n    }\n  };\n  // Converts a Unix timestamp to a real time timestamp\n  const convertTime = (timestamp) => {\n    return new Date(timestamp);\n  };\n  // Creates a date in HH:mm format from timestamp\n  const formattedDate = (timestamp) => {\n    return format(timestamp, 'HH:mm');\n  };\n  // Create a date in dd-MM-yyyy format from timestamp\n  const formattedFullDate = (timestamp) => {\n    return format(timestamp, 'dd-MM-yyyy');\n  };\n  // Returns the current date in chart-friendly format\n  const thisDate = format(new Date(), 'dd-MM-yyyy');\n\n  return {\n    onItemClickNavigate,\n    convertTime,\n    formattedDate,\n    formattedFullDate,\n    thisDate,\n  };\n};\nexport default GlobalFunctions;\n","/*\n    This file contains everything related to fetching data from the API\n    and handling those fetch results in an async manor.\n    Also contains the functions of handling the historical data and their charting.\n*/\n\nimport LocalStorageOperations from './LocalStorageOperations';\nimport ApiUrls from './ApiUrls'\nimport GlobalFunctions from './GlobalFunctions';\n\nconst { loginUrl,regUrl,forgotPassUrl,resetPassUrl,confirmUrl,resendVerificationUrl } = ApiUrls();\nconst {convertTime, formattedDate } = GlobalFunctions();\n// Basic Fetch template for post messages\nconst fetchPostUrl = async (url,data) => {\n    const response = await fetch(url,{\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n    });\n    return await response.json()\n};\n// Used if the server doesn't return a json response\nconst fetchPostUrlNoJson = async (url,data) => {\n    return await fetch(url, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n    });\n};\n// Basic Fetch template for get requests\nconst fetchGetUrl = async (url, userKey) => {\n    const {read} = LocalStorageOperations();\n    const userToken = read(userKey);\n    if (userToken) {\n        const response = await fetch(url, {\n            method: 'GET',\n            headers: {\n                authorization: userToken.token,\n            },\n        });\n        if (response) {\n            return await response.json()\n        } else {\n            throw Error(\"No token, fetchGetUrl\")\n        }\n    } else {\n        throw Error(\"No user, No usertoken. fetchGetUrl\")\n    }\n};\n\nconst API = () => {\n\n    // Handles Login.\n    const loginAsync = async (loginData,props) =>{\n        return fetchPostUrl(loginUrl, loginData)\n    };\n    // Handles Password reset\n    const resetPasswordAsync = async (data)=>{\n        return fetchPostUrlNoJson(resetPassUrl,data)\n    };\n    // Handles account confirmation\n    const confirmAccountAsync = async (data)=>{\n        return fetchPostUrlNoJson(confirmUrl,data)\n    };\n    // Handles email resending\n    const resendEmailAsync = async (data)=>{\n        return fetchPostUrlNoJson(resendVerificationUrl,data)\n    };\n    // Handles Forgot pass\n    const forgotPassAsync = async (data)=>{\n        return fetchPostUrlNoJson(forgotPassUrl,data)\n    };\n    // Handles registering\n    const registerAsync = async (registerData)=>{\n        return fetchPostUrlNoJson(regUrl,registerData)\n    };\n    // Handles fetching of usage data from the API\n    const getUsageData = (url, props) => {\n        return fetchGetUrl(url ,'user').then((json)=>{\n            if (json) {\n                return json\n            } else {\n                throw Error(\"No Token, getUsageData\")\n            }\n        })\n    };\n\n    const getUsageDataNoProps = (url) => {\n        return fetchGetUrl(url, 'user').then((json) => {\n            if (json) {\n                return json\n            } else {\n                throw Error(\"No Token, getUsageData\")\n            }\n        })\n    };\n\n    const getChartData = (url, location, date) => {\n        return getUsageData(url + location + date).then((json) => {\n            if (json) {\n                return json\n            } else {\n                throw Error(\"No Token, getUsageData\")\n            }\n        })\n    };\n\n    const dataToChart = (json) => {\n        if (json !== undefined) {\n            const chart = [];\n            for (let key in json) {\n                const timeStamp = convertTime(json[key].date);\n                const fromUnixTime = formattedDate(timeStamp);\n                let yc = json[key].percent;\n                let tempJson = {x: fromUnixTime, y: yc, pv: 100};\n                chart.push(tempJson);\n                // Set the data to a chart json and return it\n            }\n            return chart;\n        }\n    };\n\n    const dataToChartRestaurant = (json) => {\n        if (json !== undefined) {\n            const chart = [];\n            for (let key in json) {\n                const timeStamp = convertTime(json[key].timestamp);\n                const fromUnixTime = formattedDate(timeStamp);\n                let yc = json[key].fill_percent;\n                let tempJson = {x: fromUnixTime, y: yc, pv: 100};\n                chart.push(tempJson);\n                // Set the data to a chart json and return it\n            }\n            return chart;\n        }\n    };\n\n    // If Selected is Electric Places charts the data with the given multiplier to calculate the estimated utilization\n    const chartEstData = (json) =>{\n        const multiplier = 2.1;\n        if (json !== undefined) {\n            const chart = [];\n            for (let key in json) {\n                const timeStamp = convertTime(json[key].date);\n                const fromUnixTime = formattedDate(timeStamp);\n                let yc = json[key].percent;\n                let tempJson = {x: fromUnixTime, y: (yc*multiplier), pv: 100};\n                chart.push(tempJson);\n                // Set the data to a chart json and return it\n            }\n            return chart;\n        }\n    };\n\n    return {\n        loginAsync,\n        registerAsync,\n        getUsageData,\n        getUsageDataNoProps,\n        getChartData,\n        dataToChart,\n        forgotPassAsync,\n        resetPasswordAsync,\n        chartEstData,\n        dataToChartRestaurant,\n        confirmAccountAsync,\n        resendEmailAsync,\n    }\n\n};\n\nexport default API;\n","/*\n     This file contains everything to handle the login page of the app.\n     basic states for inputs and submit logic to handle the login event.\n     And also the layout for for the login page.\n*/\n\nimport React, {useState, useEffect} from 'react';\nimport {\n  Button,\n  Container,\n  ThemeProvider,\n  Typography,\n  TextField, Grid, Link,\n} from '@material-ui/core';\nimport MuiThemes from '../styles/muiThemes';\nimport '../styles/form.css';\nimport strings from '../localization';\nimport API from '../hooks/ApiHooks';\nimport LocalStorageOperations from '../hooks/LocalStorageOperations';\nimport Authentication from '../hooks/Authentication';\n\nconst Login = (props) => {\n  const {loginAsync} = API();\n  const {FormTheme, setBackgroundBlue} = MuiThemes();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const {create} = LocalStorageOperations();\n  const {redirectFromLogin} = Authentication();\n\n  // Sets the pages background\n  useEffect(() => {\n      setBackgroundBlue();\n  },[]); //eslint-disable-line\n  // Redirects to home if the user has already signed in\n  useEffect(()=>{\n      redirectFromLogin()\n  },[]);//eslint-disable-line\n\n\n  // Handles login submit\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    const loginData = { // Gets data from the states\n      email: email,\n      password: password,\n    };\n    const json = loginAsync(loginData);\n    json.then((result) => {\n      if (!result.errors) { // Check if the result contains errors\n          let json = {username: result.username, token: result.token};\n          create(JSON.stringify(json), 'user'); // Saves the users information as a json string inside LocalStorage\n          window.location.href = '/home';\n      } else {\n        const errors = result.errors;\n        alert(errors[0].msg); // Alerts the user that the sign in failed\n      }\n    });\n  };\n\n  return (\n      <ThemeProvider theme={FormTheme}>\n        <Container component='main' maxWidth=\"xs\">\n          <div className=\"form\">\n            <form noValidate onSubmit={handleSubmit}>\n              <img src={require('../assets/logo_mycampus.webp')}\n                   alt={strings.logoAlt} className=\"logoImg\"/>\n              <Typography component=\"h5\" color=\"secondary\" className=\"typo\" style={{paddingTop:\"1rem\"}}>\n                {strings.welcome}\n              </Typography>\n              <Typography component=\"h1\" variant=\"h5\" color={'secondary'}\n                          className=\"typo\" style={{paddingTop:\"1rem\"}}>\n                {strings.signIn}\n              </Typography>\n              <TextField\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  required\n                  fullWidth\n                  color={'secondary'}\n                  id=\"email\"\n                  label={strings.emailAddress}\n                  name=\"email\"\n                  onChange={event => setEmail(event.target.value)}\n                  value={email}\n                  autoComplete={'email'}\n                  autoFocus\n              />\n              <TextField\n                  color={'secondary'}\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  required\n                  fullWidth\n                  name=\"password\"\n                  label={strings.password}\n                  type=\"password\"\n                  id=\"password\"\n                  onChange={event => setPassword(event.target.value)}\n                  value={password}\n              />\n              <Button type=\"submit\" fullWidth variant=\"contained\"\n                      color=\"primary\">\n                {strings.signIn}\n              </Button>\n              <Grid style={{padding: '1em'}}>\n                <Grid item xs style={{padding: '1em'}}>\n                  <Link\n                      onClick={() => {window.location.href = '/forgot_password';}}>\n                    {strings.forgotPass}\n                  </Link>\n                </Grid>\n                <Grid item>\n                  <Link onClick={() => {window.location.href = '/register';}}>\n                    {strings.noAccount}\n                  </Link>\n                </Grid>\n              </Grid>\n            </form>\n          </div>\n        </Container>\n      </ThemeProvider>\n  );\n};\n\nexport default Login;\n","/*\n    This file contains methods related to authentication.\n    These are mainly used for handling redirects if the user\n    tries to use URL navigation.\n*/\nimport LocalStorageOperations from './LocalStorageOperations';\nimport Login from '../views/login';\nimport React from \"react\";\n\nconst Authentication = (props) => {\n  const {read} = LocalStorageOperations();\n  // Returns true or false according to if the user is logged in\n  const isLoggedIn = () => {\n    let user = read('user');\n    return user !== null;\n  };\n  // Checks if the user is logged in and navigates to home or login accordingly\n  const checkIfLogged = () =>{\n    const login = read(\"user\");\n    if (login!==null){\n      window.location.href = '/home'\n    } else {\n      window.location.href = '/login'\n    }\n  };\n\n  // Redirects user to login if he tries to use url navigation without being logged in\n  const redirectToLogin = () =>{\n      const login = read(\"user\");\n      if (login===null){\n        window.location.href = \"/login\"\n      }\n  };\n\n  // Redirects from login if the user is already logged in and tries to use url navigation\n  const redirectFromLogin = () =>{\n    const login = read(\"user\")\n    if (login !== null){\n      window.location.href = \"/home\"\n    }\n  };\n\n  // Checks if logged in Then redirects to login or returns the intended page to be shown. Not in use\n  const checkLogged = (props,page) =>{\n    if (isLoggedIn()){\n      return page\n    } else {\n      return <Login/>\n    }\n  };\n\n  return {\n    isLoggedIn,\n    checkIfLogged,\n    redirectToLogin,\n    redirectFromLogin,\n    checkLogged\n  };\n};\n\nexport default Authentication;\n","/*\n    This file contains the logout event for the user\n*/\nimport LocalStorageOperations from './LocalStorageOperations';\n\n// Logout, remove auth token from localstorage\nconst Logout = () => {\n    const {del} = LocalStorageOperations();\n    const removeToken = () => {\n        del('user');\n    };\n    return {removeToken};\n};\n\nexport default Logout()\n","/*\n    This class holds the style for the top navigation bar and\n    all the elements in the top bar are here, including menu items.\n*/\nimport React, {Fragment, useState} from 'react';\nimport {AppBar, IconButton, makeStyles, Menu, MenuItem, Toolbar } from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport GlobalFunctions from \"../hooks/GlobalFunctions\";\nimport Logout from \"../hooks/Logout\";\nimport strings from \"../localization\";\n\n//Styles for the Top Navigation Bar\nconst useStyle = makeStyles((theme) => ({\n    frag: {\n        flexGrow: 1,\n    },\n    toolBar: {\n        alignItems: 'flex-start',\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n        flexGrow: 1\n    },\n    appBar: {\n        position: \"static\",\n        backgroundColor: '#124191',\n    },\n    iconButton: {\n        color: \"white\",\n    },\n    logo: {\n        flexGrow: 1,\n        marginRight: theme.spacing(2),\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n        maxWidth: 160\n    },\n    menu: {\n        color:\"inherit\",\n        edge: \"end\"\n    },\n    rightToolbar: {\n        marginLeft: 'auto',\n    },\n}));\n\nconst NaviBar = () => {\n\n    //Top navigation bar elements & menu bar elements\n    const TopNavigationBar = () => {\n        const classes = useStyle();\n\n        const [anchorEl, setAnchorEl] = useState(null);\n        const {onItemClickNavigate} = GlobalFunctions();\n        const {removeToken} = Logout;\n\n        const logoutOnClick = () => {\n            removeToken();\n            window.location.href = '/login';\n        };\n\n        const handleClick = (event) => {\n            setAnchorEl(event.currentTarget);\n        };\n\n        const handleClose = () => {\n            setAnchorEl(null);\n        };\n\n        return (\n            <Fragment>\n                <AppBar className={classes.appBar}>\n                    <Toolbar className={classes.toolBar}>\n                        <img src={require('../assets/logo_mycampus.webp')}\n                             alt={strings.logoAlt} className={classes.logo}\n                             onClick={() => onItemClickNavigate('home')}\n                        />\n\n                         <section className={classes.rightToolbar}>\n\n                            <IconButton className={classes.menu}\n                                        aria-controls=\"menu-appbar\"\n                                        aria-haspopup=\"true\"\n                                        onClick={handleClick}>\n                                <MenuIcon/>\n                            </IconButton>\n                                <Menu\n                                    id=\"simple-menu\"\n                                    anchorEl={anchorEl}\n                                    elevation={3}\n                                    getContentAnchorEl={null}\n                                    anchorOrigin={{\n                                        vertical: 'bottom',\n                                        horizontal: 'center',\n                                    }}\n                                    transformOrigin={{\n                                        vertical: 'top',\n                                        horizontal: 'center',\n                                    }}\n                                    keepMounted\n                                    open={Boolean(anchorEl)}\n                                    onClose={handleClose}\n                                >\n\n                                    <MenuItem onClick={() => onItemClickNavigate('info')}>{strings.topBarMenuItemInfo}</MenuItem>\n                                    <MenuItem onClick={() => onItemClickNavigate('home')}>{strings.topBarMenuItemHome}</MenuItem>\n                                    <MenuItem onClick={() => onItemClickNavigate('restaurant')}>{strings.topBarMenuItemRestaurant}</MenuItem>\n                                    <MenuItem onClick={() => onItemClickNavigate('p5')}>{strings.topBarMenuItemP5}</MenuItem>\n                                    <MenuItem onClick={() => onItemClickNavigate('p10')}>{strings.topBarMenuItemP10}</MenuItem>\n                                    <MenuItem onClick={() => logoutOnClick()}>{strings.topBarMenuItemLogout}</MenuItem>\n                                </Menu>\n                         </section>\n                    </Toolbar>\n                </AppBar>\n            </Fragment>\n        );\n    };\n    return {\n        TopNavigationBar: TopNavigationBar\n    };\n};\nexport default NaviBar;\n","/*\n    This file contains the CSS for the authLoading page,\n    centering the circle progress bar\n */\n\nconst AuthLoadingStyles = () => {\n\n    const centered = {\n        textAlign:\"center\",\n        margin:\"auto 0\",\n        height:\"100%\",\n        position:\"absolute\",\n        right:0,\n        top:0,\n        left:0,\n        bottom:0,\n        display:\"flex\",\n        alignItems:\"center\",\n        justifyContent:\"center\"\n    };\n\n    return {\n        centered: centered\n    }\n}\n\nexport default AuthLoadingStyles","/*\n    This file provides a component that is basically just a blank page with a loading spinner on it.\n    This is used on every navigation in the app itself. Checks if the user is logged in or not.\n    Redirects to login in case the user is not logged in\n*/\nimport React, {useEffect} from 'react';\nimport {CircularProgress} from '@material-ui/core';\nimport Authentication from '../hooks/Authentication';\nimport AuthLoadingStyles from \"../styles/authLoadingStyle\";\n\nconst AuthLoading = (props) =>{\n    const {checkIfLogged} = Authentication();\n    const {centered} = AuthLoadingStyles()\n\n    // Checks if the user is logged in when navigating to root url of the app\n    // Redirects to either home or login accordingly\n    useEffect(()=>{\n       checkIfLogged()\n    },[]); // eslint-disable-line\n\n    return (\n        <div style={centered}>\n            <CircularProgress style={{}}/>\n        </div>\n    )\n};\n\nexport default AuthLoading;\n","/*\n        This class contains the the progress bar fragment which renders the progress bar and all the texts in it\n        for p5, P10 and restaurant\n */\nimport {LinearProgress} from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport React, {Fragment} from 'react';\nimport GlobalFunctions from \"../hooks/GlobalFunctions\";\nimport Typography from \"@material-ui/core/Typography\";\nimport '../styles/progressBar.css';\n\nconst ProgressBarFragments = (props) => {\n    //Progressbar with props\n    function HomeProgressBar(props) {\n        return (\n            <LinearProgress variant=\"determinate\" value={props.value}/>\n        );\n    }\n    const {onItemClickNavigate} = GlobalFunctions();\n    /*eslint-enable */\n\n    // Global progressbar that takes a json as a parameter.\n    /*  This is a sample of what data the bar needs\n        const progressbarData = {\n            navigationUrl: undefined,              -> Url that is used for the navigation if clicked. Undefined = no navigation\n            barLabel: \"\",                          -> Top Left label of the bar. Mainly only used in Home page. \"\" = no label\n            utilization: strings.p10insideutil,    -> The string displayed in the middle of the bar\n            data: parkingP10Data,                  -> Actual data the bar will use\n            barTheme                               -> The theme for the bar. Theme must contain stuff like labelLocation & progressLabel\n        };\n    */\n    const ProgressBar = (barData) =>{\n        return (\n            <Fragment>\n                <Grid item xs={12}\n                      onClick={() => {onItemClickNavigate(barData.navigationUrl)}}>\n                    <Grid item container className={barData.barTheme.progressLabel}\n                          direction=\"row\"\n                          justify=\"space-between\"\n                          alignItems=\"center\"\n                          xs={12}>\n                        <Grid item container alignItems=\"flex-start\"\n                              className={barData.barTheme.labelLocation} xs={4}>\n                            <Typography className=\"alignLeft\">\n                                {barData.barLabel}\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={4}>\n                            <Typography>\n                                {barData.utilization}: {barData.data}%\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={4}>\n                        </Grid>\n                    </Grid>\n                    <HomeProgressBar value={barData.data}>\n                    </HomeProgressBar>\n                </Grid>\n            </Fragment>\n        )\n    };\n\n    return {\n        ProgressBar:ProgressBar\n    };\n}\n\nexport default ProgressBarFragments;\n","import strings from \"../localization\";\n\n// Holds arrays, constants etc. to be used elsewhere in the app\nconst Data = () => {\n\n    //Mathces received line id number to string\n    const lines = new Map([\n        [1, 'Favourites 1'], [2, 'Favourites 2'],\n        [3, 'Pizza'], [4, 'Round Table'], [5, 'Bowl'],\n        [6, 'Vege'], [7, 'Cafe Pickup Line'], [8, 'Salad/Nokia Coffee']]);\n\n    //Wait time map, matching received wait time value to string\n    const times = new Map([[1, strings.waitTime1], [2, strings.waitTime2],\n        [3, strings.waitTime3], [4, strings.waitTime4], [5, strings.waitTime5]]);\n\n    //Colours to match the restaurant line wait times\n    const colours = new Map([\n        [1, '#CFFFA7'], [2, '#ECFFAC'],\n        [3, '#FFF7A7'], [4, '#FFEAA5'], [5, '#FFD9A7']]);\n\n    // Serviceworker state types, check Update.js for more information\n    const SW_INIT = 'SW_INIT';\n    const SW_UPDATE = 'SW_UPDATE';\n    const SW_CONFIRM = 'SW_CONFIRM';\n    const FETCH_HEATMAP_BEGIN = 'FETCH_HEATMAP_BEGIN';\n    const FETCH_HEATMAP_SUCCESS = 'FETCH_HEATMAP_SUCCESS';\n    const FETCH_HEATMAP_FAILURE = 'FETCH_HEATMAP_FAILURE';\n\n    return {\n        lines,\n        times,\n        colours,\n        SW_INIT,\n        SW_UPDATE,\n        SW_CONFIRM,\n        FETCH_HEATMAP_SUCCESS,\n        FETCH_HEATMAP_BEGIN,\n        FETCH_HEATMAP_FAILURE\n\n    };\n};\nexport default Data;","import ApiUrls from '../hooks/ApiUrls';\nimport Data from './Data';\nimport LocalStorageOperations from './LocalStorageOperations';\n\nexport function fetchHeatMap() {\n    const {FETCH_HEATMAP_BEGIN, FETCH_HEATMAP_SUCCESS, FETCH_HEATMAP_FAILURE} = Data();\n    const {read} = LocalStorageOperations();\n\n    const fetchHeatMapBegin = () => ({\n        type: FETCH_HEATMAP_BEGIN,\n    });\n\n    const fetchHeatMapSuccess = heatmap => (\n    {\n        type: FETCH_HEATMAP_SUCCESS,\n        payload: {heatmap},\n    });\n\n    const fetchHeatMapFailure = error => ({\n        type: FETCH_HEATMAP_FAILURE,\n        payload: {error},\n    });\n\n    const {heatMapUrl} = ApiUrls();\n\n    return dispatch => {\n        const userToken = read('user');\n\n        dispatch(fetchHeatMapBegin());\n\n        return fetch(heatMapUrl, {\n            method: 'GET',\n            headers: {\n                authorization: userToken.token\n            }\n        }).then(json => {\n            handleErrors(json);\n            return json.blob();\n        }).then(res => {\n            const mapURL = URL.createObjectURL(res);\n            dispatch(fetchHeatMapSuccess(mapURL));\n            return mapURL;\n        }).catch(error => dispatch(fetchHeatMapFailure(error)));\n    };\n\n    function handleErrors(res) {\n        if (!res.ok) {\n            throw Error(res.statusText);\n        }\n        return res;\n    }\n}","import React, {useEffect} from 'react';\nimport {connect} from 'react-redux';\nimport {fetchHeatMap} from '../hooks/HeatMapActions';\n\nconst HeatMap = (props) => {\n    // set props for each of the heatmap parts\n    const {error, loading, heatmap} = props;\n\n    //Fetches data and adds timer for periodic heatmap update, 30 second interval.\n    useEffect(() => {\n        props.dispatch(fetchHeatMap());\n        let interval = setInterval(function() {props.dispatch(fetchHeatMap())}\n        , 30000);\n\n        return function cleanUpInterval() {\n            clearInterval(interval);\n        }\n    }, []); // eslint-disable-line\n\n    if (error) {\n        return (\n            <div>{error.message}</div>\n        );\n    }\n    if (loading) {\n        return (\n            <div>Loading heatmap...</div>\n        );\n    }\n    else {\n        return (\n            <div>\n                <img src={heatmap} alt=\"Restaurant Heatmap\"\n                     style={{\n                         alignSelf: \"center\",\n                         width: \"100%\",\n                         height: \"100%\"\n                     }}/>\n            </div>\n        );\n    }\n};\n\nconst mapStateToProps = (state) => (\n    {\n    heatmap: state.HeatMapReducer.map,\n    loading: state.HeatMapReducer.loading,\n    error: state.HeatMapReducer.error,\n});\nexport default connect(mapStateToProps)(HeatMap);","/* eslint-disable no-unused-vars */\nimport React, {useEffect, useState} from 'react';\nimport '../styles/App.css';\nimport {\n  Container, makeStyles,\n  ThemeProvider,\n} from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport Authentication from '../hooks/Authentication';\nimport NaviBar from '../fragments/TopNavigationBarFragment';\nimport AuthLoading from '../views/authLoading';\nimport ProgressBarFragments from '../fragments/ProgressBarFragments'\nimport MuiThemes from \"../styles/muiThemes\";\nimport ApiUrls from \"../hooks/ApiUrls\";\nimport API from \"../hooks/ApiHooks\";\nimport strings from \"../localization\";\nimport blue from '@material-ui/core/colors/blue';\nimport HeatMap from '../fragments/HeatMap';\n\nconst Home = (props) => {\n  const {getUsageData} = API();\n  const {isLoggedIn} = Authentication();\n  const {TopNavigationBar} = NaviBar();\n  const {ProgressBar} = ProgressBarFragments();\n  const {parkingP5Url, restaurantUrl, parkingP10Url, parkingP10TopUrl} = ApiUrls();\n  const {PageTheme} = MuiThemes();\n  // States\n  const [restaurantData, setRestaurantData] = useState(undefined);\n  const [parkingP5Data, setParkingP5Data] = useState(undefined);\n  const [parkingP10Data, setParking10Data] = useState(undefined);\n  const [parkingP10TopData, setParkingP10TopData] = useState(undefined);\n  const [parkingP10ElectricData, setParkingP10ElectricData] = useState(undefined);\n  const multiplier = 2;\n\n  /*eslint-enable */\n  useEffect(()=> {\n    getUsageData(parkingP5Url, props).then(result => setParkingP5Data(result.percent));\n    getUsageData(restaurantUrl, props).then(result => setRestaurantData(result.fill_percent));\n    getUsageData(parkingP10Url, props).then(result => setParking10Data(result.percent));\n    getUsageData(parkingP10TopUrl, props).then((result) => {setParkingP10TopData(result.percent); setParkingP10ElectricData(result.percent*multiplier)});\n  },[]); //eslint-disable-line\n\n\n  const HomePage = () => {\n\n    //Styles for the ProgressBars\n    //makeStyles, createStyles can not be in another folder and imported\n    //the styles have to be in the same file where they are used.\n    const colorB = blue[500]\n    const useStyles = makeStyles({\n      root: {\n        flexGrow: 1,\n      },\n      headLine: {\n        marginTop: '10px',\n        marginBottom: '10px',\n        color: colorB,\n      },\n      progressLabel: {\n        position: 'absolute',\n        zIndex: 1,\n        maxHeight: '100px',\n        height: '14vh',\n        maxWidth: '1152px',\n        width: '90%',\n      },\n      labelLocation: {\n        maxHeight: '100px',\n        height: '15vh',\n        justifyContent: 'flex-start',\n      },\n\n    });\n    const barTheme = useStyles();\n\n    const restaurantBarData = {navigationUrl: '/restaurant', barLabel: strings.topBarMenuItemRestaurant, utilization: strings.liveUtilization, data: restaurantData,barTheme};\n    const p5BarData = {navigationUrl: '/p5', barLabel: strings.p5inside, utilization: strings.liveUtilization, data: parkingP5Data,barTheme};\n    const p10insideData = {navigationUrl: '/p10', barLabel: strings.p10inside, utilization: strings.liveUtilization, data: parkingP10Data,barTheme};\n    const p10roofData = {navigationUrl: '/p10', barLabel: strings.p10rooftop, utilization: strings.liveUtilization, data: parkingP10TopData,barTheme};\n    const p10electricData = {navigationUrl: '/p10', barLabel: strings.p10electric, utilization: strings.liveUtilization, data: parkingP10ElectricData,barTheme};\n\n    return (\n        <ThemeProvider theme={PageTheme}>\n          {TopNavigationBar()}\n          <Container>\n            <Grid container spacing={1}\n                  justify=\"space-between\">\n              <Grid item xs={12}>\n               <h3 className={barTheme.headLine}>\n                 {strings.currentStatsAre}\n               </h3>\n              </Grid>\n              {ProgressBar(restaurantBarData)}\n              {ProgressBar(p5BarData)}\n              {ProgressBar(p10insideData)}\n              {ProgressBar(p10roofData)}\n              {ProgressBar(p10electricData)}\n            </Grid>\n\n          </Container>\n        </ThemeProvider>\n    );\n  };\n\n  const AuthHome = () => {\n    if (isLoggedIn()) {\n      return <HomePage/>;\n    } else {\n      return <AuthLoading/>;\n    }\n  };\n\n  return (\n      <AuthHome/>\n  );\n};\n\nexport default Home;\n","import {makeStyles} from \"@material-ui/core\";\n\nconst InfoStyles = () => {\n\n    const infoStyle = makeStyles(theme => ({\n        root: {\n            flexGrow: 1,\n        },\n        margin: {\n            margin: theme.spacing(1),\n            border: 1,\n        },\n\n    }));\n\n    return {\n        infoStyle: infoStyle\n    }\n}\n\nexport default InfoStyles","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport '../styles/App.css';\nimport NaviBar from '../fragments/TopNavigationBarFragment';\nimport Authentication from '../hooks/Authentication';\nimport AuthLoading from './authLoading';\nimport strings from '../localization';\nimport InfoStyles from \"../styles/infoStyles\";\n\nconst Info = (props) => {\n  const {TopNavigationBar} = NaviBar();\n  const {isLoggedIn} = Authentication();\n  const {infoStyle} = InfoStyles\n\n  const InfoPage = () => {\n    return (\n        <div className={infoStyle}>\n          {TopNavigationBar()}\n          <h2>MyCampus</h2>\n          <p>{strings.infoPageHeading}</p>\n          <p>{strings.infoPageP1}</p>\n          <p>{strings.infoPageP2}</p>\n        </div>\n    );\n  };\n\n  const AuthInfo = () => {\n    if (isLoggedIn()) {\n      return <InfoPage/>;\n    } else {\n      return <AuthLoading/>;\n    }\n  };\n\n  return (\n      <AuthInfo/>\n  )\n};\n\nexport default Info;\n","import { makeStyles} from \"@material-ui/core/styles\";\n\nconst commonStyles = makeStyles({\n    bottomTabs: {\n        position: \"absolute\",\n        bottom: 0,\n        width: \"100%\",\n        background: \"white\",\n    },\n\n});\n\nexport default commonStyles;","/*\n        This class holds the charts and their styling for P5, P10 & Restaurant\n */\nimport React, {Fragment, useEffect, useState} from 'react';\nimport {Container, makeStyles} from '@material-ui/core';\nimport {AreaChart, CartesianGrid, ResponsiveContainer, XAxis} from 'recharts';\nimport Area from 'recharts/lib/cartesian/Area';\nimport YAxis from 'recharts/lib/cartesian/YAxis';\nimport API from '../hooks/ApiHooks';\nimport ApiUrls from '../hooks/ApiUrls';\nimport GlobalFunctions from '../hooks/GlobalFunctions';\nimport {scaleTime} from 'd3-scale';\nimport {utcHour} from 'd3-time';\nimport format from 'date-fns/format'\n\nconst useStyle = makeStyles((theme) => ({\n    p5Box: {\n        width: '100%',\n        height: '45vh',\n        marginTop: '5%',\n        display: 'block',\n\n    },\n    p10Box: {\n        width: '100%',\n        height: '45vh',\n        marginTop: '5%',\n        display: 'block',\n\n    },\n    RestaurantBox: {\n        width: '100%',\n        height: '45vh',\n        marginTop: '5%',\n        display: 'block',\n\n    }\n}));\n// Holds all the fragments for charts\nconst ChartFragment = () => {\n        const classes = useStyle();\n        const {getChartData, dataToChart, chartEstData, dataToChartRestaurant} = API();\n        const {dailyParkingUrl, dailyRestaurantUrl} = ApiUrls();\n        const {formattedFullDate} = GlobalFunctions();\n\n        // Convert data to be used in chart\n        // Check recharts.org for documentation\n        const renderChart = (data, maxValue, ticks) => (\n            // Responsivecontainer for flexible chart size\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <AreaChart minWidth={200} minHeight={200}\n                    //Negative margin below removes the space between YAxis and left side of chart\n                           margin={{left: -20, right: 20, top: 10}} data={data}>\n                    <CartesianGrid stroke=\"#ddd\" strokeDasharray=\"5 5\"/>\n                    <Area dataKey=\"y\" fill=\"#0000FF\"/>\n                    <XAxis dataKey=\"x\" padding={{right: 0}} allowDataOverflow={false}\n                           interval={0} ticks={ticks}\n                           tickSize={6} type='category'/>\n                    <YAxis fill=\"#8884d8\" dataKey=\"pv\" type=\"number\" domain={[0, values => {\n                        // If data does not contain percentage values 50 or higher, Y-axis is set to 0-50%, otherwise 0-100%\n                        if (maxValue < 50) {\n                            return 50\n                        } else {\n                            return 100\n                        }\n                    }]}\n                           unit={\"%\"}\n                           allowDataOverflow={true}/>\n                </AreaChart>\n            </ResponsiveContainer>);\n\n        // Common chart to be used, needs a date and location(path)\n        const Chart = (props) => {\n            const propsDate = formattedFullDate(props.date);\n            const [chartData, setChartData] = useState(undefined);\n            const [dataForRender, setDataForRender] = useState(undefined);\n            const [ticksForRender, setTicksForRender] = useState(undefined);\n            const [max, setMax] = useState(undefined);\n\n            useEffect(() => {\n                if (props.location === \"restaurant\") {\n                    getChartData(dailyRestaurantUrl, '', propsDate).then(json => dataToChartRestaurant(json)).then(json => setChartData(json))\n                } else if (props.location === \"electric\") {\n                    getChartData(dailyParkingUrl, 'P10TOP/', propsDate).then(json => chartEstData(json.samples)).then(json => setChartData(json))\n                } else {\n                    getChartData(dailyParkingUrl, props.location, propsDate).then(json => dataToChart(json.samples)).then(json => setChartData(json))\n                }\n            }, [props]); // eslint-disable-line\n\n            //Filters data to only have datapoints between 06:00 and 18:00\n            const filterTime = (element) => {\n                if (element.x >= \"06:00\" && element.x <= \"18:00\") {\n                    return element;\n                }\n            };\n\n            //Sort function for time.\n            const sortCompareFunction = (a, b) => {\n                return (new Date('1970/01/01 ' + a.x) - new Date('1970/01/01 ' + b.x));\n\n            };\n\n            //Looks at array and adds missing data points for certain hour marks.\n            const fixTimes = (array) => {\n                let returnArray = [];\n                let tempArray = [];\n                let highest = 0;\n                for (let i = 1; i < array.length; i++) {\n                    let dataObject = undefined;\n                    if (props.location === \"restaurant\") {\n                        dataObject = (checkIfMissingTimeRestaurant(i, array.length - 1, array[i - 1], array[i]));\n                    } else {\n                        dataObject = (checkIfMissingTime(i, array.length - 1, array[i - 1], array[i]));\n                    }\n                    if (array[i].y > highest) {\n                        highest = array[i].y;\n                    }\n                    if (dataObject !== -1 && dataObject !== undefined) {\n                        tempArray.push(dataObject);\n                    }\n                }\n\n                setMax(highest);\n                returnArray = array.concat(tempArray);\n                returnArray.sort(sortCompareFunction);\n                return returnArray;\n            };\n\n            //Return an average of two values\n            const getAverage = (x1, x2) => {\n                return (x1 + x2) / 2;\n            };\n\n            //Returns a data point for possible missing hour mark\n            const checkIfMissingTime = (index, lastIndex, prevElement, element) => {\n                if (index === 1 && prevElement.x > \"06:00\") {\n                    return {x: \"06:00\", y: prevElement.y, pv: 100};\n                } else if (prevElement.x < \"08:00\" && element.x > \"08:00\") {\n                    let yValue = getAverage(prevElement.y, element.y);\n                    return {x: \"08:00\", y: yValue, pv: 100};\n                } else if (prevElement.x < \"10:00\" && element.x > \"10:00\") {\n                    let yValue = getAverage(prevElement.y, element.y);\n                    return {x: \"10:00\", y: yValue, pv: 100};\n                } else if (prevElement.x < \"12:00\" && element.x > \"12:00\") {\n                    let yValue = getAverage(prevElement.y, element.y);\n                    return {x: \"12:00\", y: yValue, pv: 100};\n                } else if (prevElement.x < \"14:00\" && element.x > \"14:00\") {\n                    let yValue = getAverage(prevElement.y, element.y);\n                    return {x: \"14:00\", y: yValue, pv: 100};\n                } else if (prevElement.x < \"16:00\" && element.x > \"16:00\") {\n                    let yValue = getAverage(prevElement.y, element.y);\n                    return {x: \"16:00\", y: yValue, pv: 100};\n                } else if (index === lastIndex && element.x < \"18:00\" && prevElement.x > \"17:50\") {\n                    return {x: \"18:00\", y: element.y, pv: 100};\n                } else return -1;\n            };\n\n            //Returns a data point for possible missing hour mark. Intended for restaurant data.\n            const checkIfMissingTimeRestaurant = (index, lastIndex, prevElement, element) => {\n                if (element.x < \"08:30\" && index === 1 && prevElement.x > \"08:00\") {\n                    return {x: \"08:00\", y: element.y, pv: 100};\n                } else if (prevElement.x < \"10:00\" && element.x > \"10:00\") {\n                    let yValue = getAverage(prevElement.y, element.y);\n                    return {x: \"10:00\", y: yValue, pv: 100};\n                } else if (prevElement.x < \"12:00\" && element.x > \"12:00\") {\n                    let yValue = getAverage(prevElement.y, element.y);\n                    return {x: \"12:00\", y: yValue, pv: 100};\n                } else if (prevElement.x < \"14:00\" && element.x > \"14:00\") {\n                    let yValue = getAverage(prevElement.y, element.y);\n                    return {x: \"14:00\", y: yValue, pv: 100};\n                } else if (index === lastIndex && element.x < \"16:00\" && prevElement.x > \"15:50\") {\n                    return {x: \"16:00\", y: element.y, pv: 100};\n                } else return -1;\n            };\n\n            //Parses retrieved data to only points between 06:00 and 18:00, saves highest utilization point from those data points as well\n            useEffect(() => {\n                if (chartData !== undefined) {\n                    let tempChartData = chartData.filter(filterTime);\n                    let fixTimesArray = fixTimes(tempChartData);\n                    let domain = [];\n                    let timeFormat = (time => format(time, \"HH:mm\"));\n                    if (fixTimesArray.length > 0) {\n                        domain = [new Date('1970/01/01 ' + fixTimesArray[0].x), new Date('1970/01/01 ' + fixTimesArray[fixTimesArray.length - 1].x)];\n                    }\n                    let scale = scaleTime().domain(domain);\n                    let ticks = scale.ticks(utcHour.every(2)).map(item => timeFormat(item));\n                    tempChartData = fixTimesArray;\n                    setTicksForRender(ticks);\n                    setDataForRender(tempChartData);\n                }\n            }, [chartData]); //eslint-disable-line\n\n            return (\n                <Fragment>\n                    <Container className={classes.p10Box}>\n                        <p>Utilization Records for {propsDate}</p>\n                        {renderChart(dataForRender, max, ticksForRender)}\n                    </Container>\n                </Fragment>\n            );\n        };\n\n// Chart for Restaurant History\n        /*eslint-disable */\n        return {\n            Chart: Chart,\n        };\n    }\n;\n\nexport default ChartFragment;\n","/*\n    This file contains the bottom tab fragments that can be found in P10,P5 and Restaurant pages.\n    Each components have a bit more explanation what they are.\n*/\n\nimport React, {useEffect, useState} from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport ChartFragment from \"./ChartFragments\";\nimport {KeyboardDatePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport ProgressBarFragments from '../fragments/ProgressBarFragments'\nimport {Box, Container, createMuiTheme, FormControl, InputLabel, makeStyles, Select} from \"@material-ui/core\";\nimport strings from \"../localization\";\nimport API from \"../hooks/ApiHooks\";\nimport ApiUrls from \"../hooks/ApiUrls\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Data from \"../hooks/Data\";\nimport Typography from \"@material-ui/core/Typography\";\nimport blue from '@material-ui/core/colors/blue';\nimport {ThemeProvider} from '@material-ui/core';\n\nconst {parkingP5Url} = ApiUrls();\n\nconst TabFragments = (props) => {\n    const {Chart} = ChartFragment();\n    const p5Loc = 'P5/';\n    const {ProgressBar} = ProgressBarFragments();\n\n    const DatePickerTheme = createMuiTheme({\n        MuiTypography: {\n            body1: {\n                color: \"black\"\n            }\n        },\n    });\n\n    const colorB = blue[500];\n    // this style is used to make small tweaks to the progress bars and their labels\n    const useStyles = makeStyles(theme => ({\n        root: {\n            flexGrow: 1,\n        },\n        headLine: {\n            marginTop: '10px',\n            marginBottom: '10px',\n            color: colorB,\n        },\n        progressLabel: {\n            position: 'absolute',\n            zIndex: 1,\n            maxHeight: '100px',\n            height: '8h',\n            maxWidth: '1152px',\n            width: '90%',\n        },\n        labelLocation: {\n            maxHeight: '100px',\n            height: '7vh',\n            justifyContent: 'flex-start',\n            paddingLeft: \"5px\"\n        },\n    }));\n    const barTheme = useStyles();\n\n    // Renders the P10 Live page with rooftop(electric), rooftop and inside progress bars\n    function TabFragmentLive(props) {\n        const {children, value, index, ...other} = props;\n        const {parkingP10Url, parkingP10TopUrl} = ApiUrls();\n        const {getUsageData} = API();\n        const [parkingP10Data, setParking10Data] = useState(undefined);\n        const [parkingP10TopData, setParkingP10TopData] = useState(undefined);\n        const [parkingP10ElectricData, setParkingP10ElectricData] = useState(undefined);\n        const multiplier = 2.1; // This is used in the estimation because about half of the rooftop is electric places.\n        // Fetches data for the progress bars and sets the,\n        useEffect(() => {\n            getUsageData(parkingP10Url, props).then(result => setParking10Data(result.percent));\n            getUsageData(parkingP10TopUrl, props).then((result) => {\n                setParkingP10TopData(result.percent);\n                setParkingP10ElectricData(result.percent * multiplier)\n            });\n        }, []);  //eslint-disable-line\n\n        // ProgressBars take a json as a parameter that contains navigation url(undefined means no navigation from the click)\n        // Label is the top left label (Left empty because there is no used to it in this page\n        // Utilization is the string in the middle of the bar\n        // Data is the actual data the bar takes and lastly it takes a theme as its parameter\n        const p10insideData = {\n            navigationUrl: undefined,\n            barLabel: \"\",\n            utilization: strings.p10insideutil,\n            data: parkingP10Data,\n            barTheme\n        };\n        const p10roofData = {\n            navigationUrl: undefined,\n            barLabel: \"\",\n            utilization: strings.p10rooftoputil,\n            data: parkingP10TopData,\n            barTheme\n        };\n        const p10electicData = {\n            navigationUrl: undefined,\n            barLabel: \"\",\n            utilization: strings.p10electricutil,\n            data: parkingP10ElectricData,\n            barTheme\n        };\n\n\n        return (\n            <Container>\n                <div\n                    component=\"div\"\n                    role=\"tabfragmentlive\" //eslint-disable-line\n                    hidden={value !== index}\n                    id={`tabfragmentlive-${index}`}\n                    aria-labelledby={`tab-${index}`}\n                    {...other}>\n                    <h3 className={barTheme.headLine}>{strings.topBarMenuItemP10}</h3>\n                    <Grid container spacing={1}\n                          justify=\"space-between\">\n                        {ProgressBar(p10electicData)}\n                        {ProgressBar(p10roofData)}\n                        {ProgressBar(p10insideData)}\n                    </Grid>\n\n                </div>\n            </Container>\n        );\n    }\n\n    // Renders the P10 History component with date level selector, date picker and chart\n    function TabFragmentHistory(props) {\n        const {children, value, index, ...other} = props;\n        const [selectedDate, setSelectedDate] = useState(new Date(props.date));\n        const insideLevels = 'P10/';\n        const rooftopLevels = 'P10TOP/';\n        const electric = \"electric\";\n        const [selectedLevel, setSelectedLevel] = useState(electric);\n\n        const handleDateChange = date => {\n            setSelectedDate(date);\n            props.onDateChange(date);\n        };\n        /*eslint-disable */\n\n        const handleChange = (value) => {\n            setSelectedLevel(value)\n        };\n\n        // Selector for selecting the desired level in P10\n        // Select value is the default value that is shown first\n        const LevelSelector = () => {\n            return (\n                <div>\n                    <FormControl style={{width: \"250px\", textAlign:\"left\"}}>\n                        <InputLabel id=\"level\">{strings.level}</InputLabel>\n                        <Select labelId=\"level\" id=\"level\" value={selectedLevel}\n                                onChange={(event) => {\n                                    {\n                                        handleChange(event.target.value)\n                                    }\n                                }}>\n                            <MenuItem value={electric}>{strings.p10electric}</MenuItem>\n                            <MenuItem value={rooftopLevels}>{strings.p10rooftop}</MenuItem>\n                            <MenuItem value={insideLevels}>{strings.p10inside}</MenuItem>\n                        </Select>\n                    </FormControl>\n                </div>\n            )\n        };\n\n\n        return (\n            <div\n                role=\"tabfragment\"\n                hidden={value !== index}\n                id={`tabfragment-${index}`}\n                aria-labelledby={`tab-${index}`}\n                inputstyle={{textAlign: 'center'}}\n                {...other} style={{marginTop: \"16px\"}}>\n                <LevelSelector/>\n                <ThemeProvider theme={DatePickerTheme}>\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                        <KeyboardDatePicker\n                            style={{color: \"black\"}}\n                            margin=\"normal\"\n                            id=\"dialog date picker\"\n                            label=\"Date picker\"\n                            format=\"dd/MM/yyyy\"\n                            value={selectedDate}\n                            disableFuture={true}\n                            onChange={handleDateChange}\n                            KeyboardButtonProps={{\n                                'aria-label': 'change date',\n                            }}\n                        />\n                    </MuiPickersUtilsProvider>\n                </ThemeProvider>\n                <Chart date={selectedDate} location={selectedLevel}/>\n            </div>\n        );\n    }\n\n    // Renders the P5 live data page with progress bar and\n    // Live util graph\n    function TabFragmentLiveP5(props) {\n        const {children, value, index, ...other} = props;\n        const {getUsageData} = API();\n\n        const [parkingP5Data, setParkingP5Data] = useState(undefined);\n\n        useEffect(() => {\n            getUsageData(parkingP5Url, props).then(result => setParkingP5Data(result.percent));\n        }, [parkingP5Data]);\n\n        const barData = {\n            navigationUrl: undefined,\n            barLabel: '',\n            utilization: strings.p10insideutil,\n            data: parkingP5Data,\n            barTheme\n        };\n        return (\n            <div\n                hidden={value !== index}>\n                <Container>\n                    <h3 className={barTheme.headLine}>{strings.insideLevelsP5}</h3>\n                    <Grid>{ProgressBar(barData)}</Grid>\n                </Container>\n                <Grid>\n                    <Chart date={new Date()} location={p5Loc}/>\n                </Grid>\n            </div>\n        );\n    }\n\n    // Renders the P5 history page with graph and date picker\n    function TabFragmentHistoryP5(props) {\n        const {children, value, index, ...other} = props;\n        const [selectedDate, setSelectedDate] = useState(new Date(props.date));\n\n        const handleDateChange = date => {\n            setSelectedDate(date);\n            props.onDateChange(date);\n        };\n\n        return (\n            <div\n                role=\"tabfragment\"\n                hidden={value !== index}\n                id={`tabfragment-${index}`}\n                aria-labelledby={`tab-${index}`}\n                inputstyle={{textAlign: 'center'}}\n                {...other}>\n                <ThemeProvider theme={DatePickerTheme}>\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                        <KeyboardDatePicker\n                            margin=\"normal\"\n                            id=\"dialog date picker\"\n                            label=\"Date picker\"\n                            format=\"dd/MM/yyyy\"\n                            value={selectedDate}\n                            disableFuture={true}\n                            onChange={handleDateChange}\n                            KeyboardButtonProps={{\n                                'aria-label': 'change date',\n                            }}\n                        />\n                    </MuiPickersUtilsProvider>\n                </ThemeProvider>\n                <Chart date={selectedDate} location={p5Loc}/>\n            </div>\n        );\n    }\n\n    // Renders the restaurant lines page that shows individual lines and their wait times\n    function TabRestaurantLines(props) {\n        const {children, value, index, ...other} = props;\n        const [queueTimes, setQueueTimes] = useState(new Map());\n        const {getUsageDataNoProps} = API();\n        const {restaurantQueueUrl} = ApiUrls();\n        const {lines, times, colours} = Data();\n\n        const getQueueTimes = async () => {\n            for (let i = 1; i < 9; i++) {\n                getUsageDataNoProps(restaurantQueueUrl + i).then(result => setQueueTimes(new Map(queueTimes.set(i, result))))\n            }\n        };\n\n        useEffect(() => {\n            getQueueTimes().then()\n        }, []);// eslint-disable-line\n\n        return (\n            <div role=\"tabfragment\"\n                 hidden={value !== index}\n                 id={`tabfragment-${index}`}\n                 aria-labelledby={`tab-${index}`}\n                 inputstyle={{textAlign: 'center'}}\n                 {...other}>\n                <h3 className={barTheme.headLine}>{strings.restaurantPageTitle}</h3>\n                <Box>\n                    {[...lines.keys()].map(mapKey => (\n                        <div key={mapKey}>\n                            {queueTimes.get(mapKey) != null &&\n                            <Box className=\"lineDiv\"\n                                 border={1}\n                                 p={1}\n                                 m={1}\n                                 bgcolor={colours.get(parseInt(queueTimes.get(mapKey).queue_time))}\n                                 borderColor=\"#E9E9E9\">\n                                <Grid container direction=\"row\"\n                                      justify=\"space-between\"\n                                      alignItems=\"center\">\n                                    <Grid>\n                                        <Typography>\n                                            {lines.get(mapKey)}\n                                        </Typography>\n                                    </Grid>\n                                    <Grid>\n                                        {queueTimes.get(mapKey) != null &&\n                                        <Typography>\n                                            {times.get(parseInt(queueTimes.get(mapKey).queue_time))}\n                                        </Typography>\n                                        }\n                                    </Grid>\n                                </Grid>\n                            </Box>\n                            }\n                        </div>\n                    ))}\n                </Box>\n            </div>\n        )\n    }\n\n    // Renders the restaurant chart page with a date picker and chart\n    function TabRestaurantChart(props) {\n        const {children, value, index, ...other} = props;\n        const [selectedDate, setSelectedDate] = useState(new Date(props.date));\n\n        const handleDateChange = date => {\n            setSelectedDate(date);\n            props.onDateChange(date);\n        };\n\n        return (\n            <div role=\"tabfragment\"\n                 hidden={value !== index}\n                 id={`tabfragment-${index}`}\n                 aria-labelledby={`tab-${index}`}\n                 inputstyle={{textAlign: 'center'}}\n                 {...other}>\n                <ThemeProvider theme={DatePickerTheme}>\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                        <KeyboardDatePicker\n                            margin=\"normal\"\n                            id=\"dialog date picker\"\n                            label=\"Date picker\"\n                            format=\"dd/MM/yyyy\"\n                            value={selectedDate}\n                            disableFuture={true}\n                            onChange={handleDateChange}\n                            KeyboardButtonProps={{\n                                'aria-label': 'change date',\n                            }}\n                        />\n                    </MuiPickersUtilsProvider>\n                </ThemeProvider>\n                <Chart date={selectedDate} location={\"restaurant\"}/>\n            </div>\n        );\n    }\n\n    return {\n        TabFragmentHistory: TabFragmentHistory,\n        TabFragmentLive: TabFragmentLive,\n        TabFragmentLiveP5: TabFragmentLiveP5,\n        TabFragmentHistoryP5: TabFragmentHistoryP5,\n        TabRestaurantLines: TabRestaurantLines,\n        TabRestaurantChart: TabRestaurantChart,\n    };\n\n};\n\nexport default TabFragments;\n\n","/*\n    This file is the component that renders the P10 map.\n*/\nimport React from 'react';\nimport strings from \"../localization\";\nimport '../styles/App.css';\nimport Box from \"@material-ui/core/Box\";\n\nconst P10MapView = (props) =>{\n    const {children, value, index, ...other} = props;\n    return (\n        <div role=\"tabfragmentp10map\" //eslint-disable-line\n            hidden={value !== index}\n            id={`tabfragmentp10map-${index}`}\n            aria-labelledby={`tab-${index}`}\n            inputstyle={{textAlign: 'center'}} //eslint-disable-line\n            {...other}>\n            <div>\n                {value === index && <Box p={5}>{children}</Box>}\n            </div>\n            <img src={require('../assets/campus_map_P10.webp')} alt={strings.p10MapAlt} className=\"MapStyle\"/>\n        </div>\n    )\n};\n\nexport default P10MapView;\n","/*\n    This file is the component that renders the P5 map.\n*/\nimport React from 'react';\nimport strings from \"../localization\";\nimport '../styles/App.css';\nimport Box from \"@material-ui/core/Box\";\n\nconst P5MapView = (props) =>{\n    const {children, value, index, ...other} = props;\n    return (\n        <div role=\"tabfragmentp5map\" //eslint-disable-line\n             hidden={value !== index}\n             id={`tabfragmentp5map-${index}`}\n             aria-labelledby={`tab-${index}`}\n             inputstyle={{textAlign: 'center'}} //eslint-disable-line\n             {...other}>\n            <div>\n                {value === index && <Box p={5}>{children}</Box>}\n            </div>\n            <img src={require('../assets/campus_map_P5.webp')} alt={strings.p5MapAlt} className='MapStyle'/>\n        </div>\n    )\n};\n\nexport default P5MapView;\n","/*\n    This file is the component that renders the Restaurant heat map\n */\nimport React from 'react';\nimport HeatMap from \"../fragments/HeatMap\"; //eslint-disable-line\n\n\nconst RestaurantHeatMapView = (props) => {\n    const {children, value, index, ...other} = props;\n    return (\n        <div role={\"tabfragmentrestuarantheatmap\"} //eslint-disable-line\n             hidden={value !== index}\n             id={`tabfragmentp5map-${index}`}\n             aria-labelledby={`tab-${index}`}\n             {...other}>\n            <HeatMap/>\n\n        </div>\n    )\n};\n\nexport default RestaurantHeatMapView","/*\n        This class holds all the bottom tabs for restaurant, p5 & p10.\n        The page views are passed when clicked on the tab.\n */\nimport Tab from \"@material-ui/core/Tab\";\nimport strings from \"../localization\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport React, {useMemo, useState, Fragment} from \"react\";\nimport commonStyles from \"../styles/commonStyles\";\nimport TabFragments from \"./TabFragments\";\nimport P10MapView from \"../views/p10MapView\";\nimport P5MapView from \"../views/p5MapView\";\nimport RestaurantHeatMapView from \"../views/restaurantHeatMap\";\n\nconst BottomBarTabFragment = (props) => {\n    const commonClasses = commonStyles();\n    const {TabFragmentHistory, TabFragmentLive, TabFragmentLiveP5, TabFragmentHistoryP5, TabRestaurantLines, TabRestaurantChart} = TabFragments();\n\n    //P10 bottom tab\n    const P10BottomTab = () => {\n        const [value, setValue] = useState(0);\n        const [date, setDate] = useState(new Date());\n\n        const handleChange = (event, newValue) => {\n            setValue(newValue);\n        };\n\n        const handleDateChange = (data) => {\n            setDate(data);\n        };\n\n        const tabHistory = useMemo(() =>\n            <TabFragmentHistory value={value} index={1}\n                                onDateChange={handleDateChange} date={date}>\n            </TabFragmentHistory>, [value, date]\n        );\n\n        return (\n            <div>\n                <TabFragmentLive value={value} index={0}>\n                </TabFragmentLive>\n                {tabHistory}\n                <P10MapView value={value} index={2}/>\n                <Tabs\n                    value={value}\n                    onChange={handleChange}\n                    className={commonClasses.bottomTabs}\n                    variant=\"fullWidth\"\n                    indicatorColor=\"primary\"\n                >\n                    <Tab id=\"live\" label={strings.live}/>\n                    <Tab id=\"history\" label={strings.history}/>\n                    <Tab id=\"p10map\" label={strings.map}/>\n                </Tabs>\n            </div>\n        );\n    };\n\n    //P5 bottom tab\n    const P5BottomTab = () => {\n        const [valueP5, setValueP5] = useState(0);\n        const [date, setDate] = useState(new Date());\n\n        const handleChange = (event, newValue) => {\n            setValueP5(newValue);\n        };\n\n        const handleDateChange = (data) => {\n            setDate(data);\n        };\n\n        const tabHistoryP5 = useMemo(() =>\n            <TabFragmentHistoryP5 value={valueP5} index={1}\n                                  onDateChange={handleDateChange} date={date}>\n            </TabFragmentHistoryP5>, [valueP5, date]\n        );\n\n        const tabLiveP5 = useMemo(() =>\n            <TabFragmentLiveP5 value={valueP5} index={0}>\n            </TabFragmentLiveP5>, [valueP5]\n        );\n\n        return (\n            <Fragment>\n            <div>\n                {tabLiveP5}\n                {tabHistoryP5}\n                <P5MapView value={valueP5} index={2}/>\n                <Tabs\n                    value={valueP5}\n                    onChange={handleChange}\n                    className={commonClasses.bottomTabs}\n                    variant=\"fullWidth\"\n                    indicatorColor=\"primary\"\n                >\n                    <Tab id=\"live\" label={strings.live}/>\n                    <Tab id=\"history\" label={strings.history}/>\n                    <Tab id=\"p5map\" label={strings.map}/>\n                </Tabs>\n            </div>\n            </Fragment>\n        );\n    };\n\n    //Restaurant bottom tab\n    const RestaurantBottomTab = () => {\n        const [valueRestaurant, setValueRestaurant] = useState(0);\n        const [date, setDate] = useState(new Date());\n\n        const handleChange = (event, newValue) => {\n            setValueRestaurant(newValue);\n        };\n\n        const handleDateChange = (data) => {\n            setDate(data);\n        };\n//\n        return (\n            <div style={{paddingBottom:\"50px\"}}>\n                <TabRestaurantLines value={valueRestaurant} index={0}/>\n                <TabRestaurantChart value={valueRestaurant} index={1} onDateChange={handleDateChange} date={date}/>\n                <RestaurantHeatMapView value={valueRestaurant} index={2}/>\n                <Tabs\n                    value={valueRestaurant}\n                    onChange={handleChange}\n                    className={commonClasses.bottomTabs}\n                    variant=\"fullWidth\"\n                    indicatorColor=\"primary\"\n                >\n                    <Tab id=\"lines\" label={strings.lines}/>\n                    <Tab id=\"graph\" label={strings.live+ \" \"+strings.graph}/>\n                    <Tab id=\"restaurantHeatMap\" label={\"Heatmap\"}/>\n                </Tabs>\n            </div>\n        );\n    };\n\n    return {\n        P10BottomTab: P10BottomTab,\n        P5BottomTab: P5BottomTab,\n        RestaurantBottomTab: RestaurantBottomTab,\n    };\n};\n\nexport default BottomBarTabFragment;\n","/*\n    This file contains the style for progress bars for P5 & P10\n */\nimport {createMuiTheme} from \"@material-ui/core\";\nimport Colors from \"./appColors\";\n\nconst ProgressBarStyle = () => {\n\n    const {NokiaBlue, LightBlue} = Colors();\n\n    const P5P10ProgressBar = createMuiTheme({\n        flexGrow: 1,\n        overrides: {\n            MuiLinearProgress: {\n                root: {\n                    height: '15vh',\n                    maxHeight: '50px',\n                    borderRadius: '10px',\n                    width: '100%',\n                },\n                colorPrimary:{\n                    backgroundColor: NokiaBlue\n                },\n                barColorPrimary:{\n                    backgroundColor: LightBlue\n                }\n            },\n            MuiTypography:{\n                body1:{\n                    minWidth:\"200%\",\n                    color: \"white\"\n                }\n            },\n            MuiGrid: {\n                root: {\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                },\n                'spacing-xs-1-115': {\n                    padding: '0',\n                    paddingTop: \"4px\",\n                    paddingBottom: \"4px\",\n                    margin: '0px',\n                    width: '100%',\n                },\n            },\n            MuiContainer: {\n                root: {\n                    paddingLeft: '4px',\n                    paddingRight: '4px',\n                },\n            },\n\n        },\n    });\n\n    return{\n        P5P10ProgressBar:P5P10ProgressBar,\n\n    }\n};\n\n\nexport default ProgressBarStyle\n","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport '../styles/App.css';\nimport {ThemeProvider} from '@material-ui/core';\nimport NaviBar from '../fragments/TopNavigationBarFragment';\nimport Authentication from '../hooks/Authentication';\nimport AuthLoading from './authLoading';\nimport BottomBarTabFragment from \"../fragments/BottomBarFragment\";\nimport ProgressBarStyle from \"../styles/progressBarStyle\";\n\nconst P5 = (props) => {\n    const {TopNavigationBar} = NaviBar();\n    const {isLoggedIn} = Authentication();\n    const {P5BottomTab} = BottomBarTabFragment();\n    const {P5P10ProgressBar} = ProgressBarStyle()\n\n\n    const P5Page = () => {\n        return (\n            <ThemeProvider theme={P5P10ProgressBar}>\n                {TopNavigationBar()}\n                {P5BottomTab()}\n            </ThemeProvider>\n        );\n\n    };\n\n    const AuthP5 = () => {\n        if (isLoggedIn()) {\n            return <P5Page/>;\n        } else {\n            return <AuthLoading/>;\n        }\n    };\n\n    return (\n        <AuthP5/>\n    )\n};\n\nexport default P5;\n","/* eslint-disable no-unused-vars */\n\nimport React from 'react';\nimport '../styles/App.css';\nimport '../styles/p10Style.css';\nimport 'date-fns';\nimport NaviBar from '../fragments/TopNavigationBarFragment';\nimport Authentication from '../hooks/Authentication';\nimport AuthLoading from './authLoading';\nimport BottomBarTabFragment from \"../fragments/BottomBarFragment\";\nimport {ThemeProvider} from \"@material-ui/core\";\nimport ProgressBarStyle from \"../styles/progressBarStyle\";\n\n/*eslint-enable */\n\nconst P10 = () => {\n    const {isLoggedIn} = Authentication();\n    const {TopNavigationBar} = NaviBar();\n    const {P10BottomTab} = BottomBarTabFragment();\n    const {P5P10ProgressBar} = ProgressBarStyle()\n\n    const P10Page = () => {\n        return (\n            <ThemeProvider theme={P5P10ProgressBar}>\n                {TopNavigationBar()}\n                {P10BottomTab()}\n            </ThemeProvider>\n        );\n    };\n    const AuthP10 = () => { //eslint-disable-line\n        if (isLoggedIn()) {\n            return <P10Page/>;\n        } else {\n            return <AuthLoading/>;\n        }\n    };\n\n    return (\n        <AuthP10/>\n    );\n};\n\nexport default P10;\n","/* eslint-disable no-unused-vars */\n/*\n    This file contains the view for the restaurant view with authorisation check\n */\nimport React from 'react';\nimport Authentication from '../hooks/Authentication';\nimport NaviBar from \"../fragments/TopNavigationBarFragment\";\nimport AuthLoading from \"./authLoading\";\nimport BottomBarTabFragment from \"../fragments/BottomBarFragment\";\n\nconst Restaurant = () => {\n    const {isLoggedIn} = Authentication();\n    const {TopNavigationBar} = NaviBar();\n    const {RestaurantBottomTab} = BottomBarTabFragment();\n\n    const RestaurantPage = () => {\n        return (\n            <div>\n                {TopNavigationBar()}\n                {RestaurantBottomTab()}\n            </div>\n        )\n    };\n    const AuthRestaurant = () => {\n        if (isLoggedIn()) {\n            return <RestaurantPage/>\n        } else {\n\n            return <AuthLoading/>\n        }\n    };\n\n    return (\n        <AuthRestaurant/>\n    )\n};\n\nexport default Restaurant;\n","/*\n    This file contains everything needed for the forgot password page.\n    basic state for the inputted email and passing url parameters for the reset password page.\n    Also submit handling for getting the forgot password token from the server and the page\n    layout\n*/\nimport MuiThemes from '../styles/muiThemes'\nimport React, {useState, useEffect} from 'react';\nimport {\n    Button,\n    Container,\n    ThemeProvider,\n    Typography,\n    TextField, Grid, Link,\n} from '@material-ui/core';\nimport strings from \"../localization\";\nimport API from \"../hooks/ApiHooks\";\nimport {navigate} from 'hookrouter';\n\nconst ForgotPassword = (props) => {\n    const {FormTheme,setBackgroundBlue} = MuiThemes();\n    const [email, setEmail] = useState('');\n    const {forgotPassAsync} = API();\n    // Sets background\n    useEffect(()=>{\n        setBackgroundBlue()\n    },[]); //eslint-disable-line\n\n    const handleSubmit = () =>{\n        const submitData = {email: email};\n        forgotPassAsync(submitData).then((response)=>{\n            if (response.status === 200){ // If response is OK user can be notified and moved to the next screen\n                alert(strings.sentVerification); // Alerts the user that the verification token was send\n                navigate('/reset_password',false, submitData) // Submit data is given as url parameters\n            } else {\n                alert(strings.requestError) // Generic error since the API doesn't return a json with errors\n            }\n        });\n    };\n\n    return (\n        <ThemeProvider theme={FormTheme}>\n            <Container component=\"main\" maxWidth=\"xs\">\n                <div className=\"form\">\n                    <img src={require('../assets/logo_mycampus.webp')}\n                         alt={strings.logoAlt} className=\"logoImg\"/>\n                    <Typography component=\"h5\" color=\"secondary\" className=\"typo\" style={{paddingTop:\"1rem\"}}>\n                        {strings.enterEmail}\n                    </Typography>\n                    <form noValidate onSubmit={handleSubmit} className=\"forgotPassform\">\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            color={\"secondary\"}\n                            id=\"email\"\n                            label={strings.emailAddress}\n                            name=\"email\"\n                            onChange={event => setEmail(event.target.value)}\n                            value={email}\n                            autoComplete={\"email\"}\n                        />\n                        <Button onClick={()=>{handleSubmit()}} fullWidth variant=\"contained\" color=\"primary\">\n                            {strings.send}\n                        </Button>\n                        <Grid style={{padding: '1em'}}>\n                            <Grid item xs style={{padding: '1em'}}>\n                                <Link\n                                    onClick={() => {window.location.href = '/login';}}>\n                                    {strings.backToLogin}\n                                </Link>\n                            </Grid>\n                            <Grid item xs >\n                                <Link\n                                    onClick={() => {window.location.href = '/verify_account';}}>\n                                    {strings.toPasswordReset}\n                                </Link>\n                            </Grid>\n                        </Grid>\n                    </form>\n                </div>\n            </Container>\n        </ThemeProvider>\n    )\n};\n\nexport default ForgotPassword;\n","/*\n    This file contains all that is used for the Registering page of the app.\n    Contains basic states, form field validation for the registering form and submit logic for handling the\n    form submit. And lastly the layout for the Registering page.\n */\nimport React, {useState, useEffect} from 'react';\nimport MuiThemes from '../styles/muiThemes'\nimport {\n    Button,\n    Container,\n    ThemeProvider,\n    Typography,\n    TextField, Grid, Link,\n} from '@material-ui/core';\nimport strings from \"../localization\";\nimport API from \"../hooks/ApiHooks\";\nimport {navigate} from 'hookrouter';\n\n\nconst Register = (props) =>{\n    const {FormTheme,setBackgroundBlue} = MuiThemes();\n    const [btnDisable,setBtnDisable] = useState(true);\n    const {registerAsync} = API();\n\n    const [formData, setFormData] = useState({\n        username: \"\",\n        email:\"\",\n        password:\"\",\n        confirmPassword:\"\"\n    });\n\n    const [formErrors, setFormErrors] = useState({\n        usernameError: false,\n        emailError: false,\n        passwordError: false,\n        confirmPasswordError: false\n    });\n\n    const [formErrorMessages, setFormErrorMessages] = useState({\n        usernameError: \"\",\n        emailError: \"\",\n        passwordError: \"\",\n        confirmPasswordError: \"\",\n    });\n\n    // Enables the submit button when all the values have been input and are not empty\n    const enableSubmit = () => {\n        if (formData.email.length>0 && formData.password.length>0 && formData.confirmPassword.length>0 &&formData.username.length>0){\n            if (!formErrors.emailError && !formErrors.resetTokenError && !formErrors.passwordError && !formErrors.confirmPasswordError) {\n                setBtnDisable(false)\n            } else {\n                setBtnDisable(true)\n            }\n        } else {\n            setBtnDisable(true)\n        }\n    };\n    // Updates given error with a new message. \"\" message means no error\n    const updateErrorMsg = (error, message) => {\n        setFormErrorMessages({\n            ...formErrorMessages,\n            [error]: message\n        })\n    };\n    // Updates given error with the given boolean\n    const updateError = (error, bool) => {\n        setFormErrors({\n            ...formErrors,\n            [error]: bool\n        });\n        enableSubmit()\n    };\n\n    // Updates the fields json according to the inputted information\n    const updateField =e=>{\n        setFormData({\n            ...formData,\n            [e.target.name]: e.target.value\n        });\n    };\n\n    // Sets background\n    useEffect(()=>{\n        setBackgroundBlue()\n    });\n\n    useEffect(()=>{\n        enableSubmit()\n    });\n\n    // Handles the registering submit\n    const handleSubmit = () =>{\n        const submitData = {\n            email: formData.email,\n            name: formData.username,\n            password: formData.password\n        };\n        registerAsync(submitData).then((result)=>{\n            if (result.status === 200){  // OK response means that registering went through with the API so the\n                // user can be notified that it was successful and user can be navigated to the next screen\n                alert(strings.registeringSuccess);\n                navigate('/verify_account',false,{email:submitData.email})\n            } else {\n                result.json().then((json)=>{ // Server returns one error so that is read and displayed to the user\n                    const errors = json.errors;\n                    let errorStr = errors[0].msg;\n                    alert(errorStr)\n                });\n            }\n        })\n    };\n\n    // Validates username input. Has to be between 2-20 characters\n    // Also sets the errors accordingly\n    const validateUsername = () =>{\n        const uNameError =\"usernameError\";\n        if (formData.username.length >= 2 && formData.username.length <= 20) {\n            updateError(uNameError,false);\n            updateErrorMsg(uNameError,\"\");\n        }\n        else {\n            updateError(uNameError,true);\n            updateErrorMsg(uNameError,strings.usernameError);\n        }\n    };\n\n    // Validates Email input to match a \"real\" email. Also sets errors accordingly\n    const validateEmailField = () => {\n        const emailReqEx = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/; //eslint-disable-line\n        const emailError = \"emailError\";\n        if (emailReqEx.test(formData.email)) {\n            updateError(emailError, false);\n            updateErrorMsg(emailError, \"\");\n        } else {\n            updateError(emailError, true);\n            updateErrorMsg(emailError,strings.pleaseEnterEmail)\n        }\n    };\n    // Validates password to be at least 5 characters long\n    const validatePassword = () => {\n        const pwdError = \"passwordError\";\n        if (formData.password.length < 5) {\n            updateError(pwdError, true);\n            updateErrorMsg(pwdError, strings.passwordLengthError);\n        } else {\n            updateError(pwdError, false);\n            updateErrorMsg(pwdError, \"\")\n        }\n    };\n    // Checks so that password and confirm password match\n    const validateConfirmPassword = () => {\n        const confPwdError = \"confirmPasswordError\";\n        if (formData.password === formData.confirmPassword && formData.password.length >=5) {\n            updateError(confPwdError, false);\n            updateErrorMsg(confPwdError, \"\");\n        } else {\n            updateError(confPwdError, true);\n            updateErrorMsg(confPwdError, strings.passwordError);\n        }\n    };\n\n    return(\n        <ThemeProvider theme={FormTheme}>\n            <Container component=\"main\" maxWidth=\"xs\">\n                <div className=\"form\">\n                    <img src={require('../assets/logo_mycampus.webp')}\n                         className=\"logoImg\"\n                         alt={strings.logoAlt}/>\n                    <Typography component=\"h5\" color=\"secondary\" className=\"typo\" style={{paddingTop:\"1rem\"}}>\n                        {strings.joinPlatform}\n                    </Typography>\n                    <form className=\"registerForm\">\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            color={\"secondary\"}\n                            id=\"username\"\n                            label={strings.username}\n                            name=\"username\"\n                            onChange={updateField}\n                            onBlur={validateUsername}\n                            error={formErrors.usernameError}\n                            helperText={formErrorMessages.usernameError}\n                            value={formData.username}\n                        />\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            color={\"secondary\"}\n                            id=\"email\"\n                            label={strings.emailAddress}\n                            name=\"email\"\n                            onChange={updateField}\n                            onBlur={validateEmailField}\n                            error={formErrors.emailError}\n                            helperText={formErrorMessages.emailError}\n                            value={formData.email}\n                            autoComplete={\"email\"}\n                        />\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            type=\"password\"\n                            color={\"secondary\"}\n                            id=\"password\"\n                            label={strings.password}\n                            name=\"password\"\n                            onChange={updateField}\n                            onBlur={validatePassword}\n                            error={formErrors.passwordError}\n                            helperText={formErrorMessages.passwordError}\n                            value={formData.password}\n                        />\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            type=\"password\"\n                            color={\"secondary\"}\n                            id=\"confirmPassword\"\n                            label={strings.confirmPassword}\n                            name=\"confirmPassword\"\n                            onChange={updateField}\n                            onBlur={validateConfirmPassword}\n                            error={formErrors.confirmPasswordError}\n                            helperText={formErrorMessages.confirmPasswordError}\n                            value={formData.confirmPassword}\n                        />\n                        <Button fullWidth variant=\"contained\" color=\"primary\" disabled={btnDisable} onClick={()=>{handleSubmit()}}>\n                            {strings.signUp}\n                        </Button>\n                        <Grid style={{padding: '1em'}}>\n                            <Grid item xs style={{padding: '1em'}}>\n                                <Link\n                                    onClick={() => {window.location.href = '/login';}}>\n                                    {strings.backToLogin}\n                                </Link>\n                            </Grid>\n                            <Grid item xs>\n                                <Link\n                                    onClick={() => {window.location.href = '/verify_account';}}>\n                                    {strings.toConfirmation}\n                                </Link>\n                            </Grid>\n                        </Grid>\n                    </form>\n                </div>\n            </Container>\n        </ThemeProvider>\n    )\n};\nexport default Register\n","/*\n    This file contains handling of the reset password page. Basic states for the form and submit handling.\n    Also includes validations for the different fields. And functions for updating the form and its errors.\n*/\nimport MuiThemes from '../styles/muiThemes'\nimport React, {useState, useEffect} from 'react';\nimport {\n    Button,\n    Container,\n    ThemeProvider,\n    Typography,\n    TextField, Grid, Link,\n} from '@material-ui/core';\nimport strings from \"../localization\";\nimport API from \"../hooks/ApiHooks\";\nimport {useQueryParams} from 'hookrouter';\n\nconst ResetPassword = (props) => {\n\n    const {FormTheme, setBackgroundBlue} = MuiThemes();\n    const {resetPasswordAsync} = API();\n    const [btnDisable, setBtnDisable] = useState(true);\n    const [queryParams] = useQueryParams();\n\n    const [formData, setFormData] = useState({\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\",\n        resetToken: \"\"\n    });\n\n    const [formErrors, setFormErrors] = useState({\n        emailError: false,\n        passwordError: false,\n        confirmPasswordError: false,\n        resetTokenError: false\n    });\n\n    const [formErrorMessages, setFormErrorMessages] = useState({\n        emailError: \"\",\n        passwordError: \"\",\n        confirmPasswordError: \"\",\n        resetTokenError: \"\",\n    });\n    // Updates given error with a new message. \"\" message means no error\n    const updateErrorMsg = (error, message) => {\n        setFormErrorMessages({\n            ...formErrorMessages,\n            [error]: message\n        })\n    };\n    // Updates given error with the given boolean\n    const updateError = (error, bool) => {\n        setFormErrors({\n            ...formErrors,\n            [error]: bool\n        });\n        enableSubmit() // Called here because form errors are updated with this method\n    };\n    // Updates data based on the onChange event\n    const updateField = e => {\n        setFormData({\n            ...formData,\n            [e.target.name]: e.target.value\n        });\n    };\n\n    useEffect(() => {\n        setBackgroundBlue()\n    });\n\n    useEffect(() => { //eslint-disable-line\n        const {\n            // Use object destructuring and a default value\n            // if the param is not yet present in the URL.\n            email = \"\" // eslint-disable-line\n        } = queryParams;\n        setFormData({\n            ...formData,\n            email: queryParams.email\n        })\n    }, [formData.email, queryParams.email]); // eslint-disable-line\n\n    const handleSubmit = () => {\n        const submitData = {\n            email: formData.email,\n            password: formData.password,\n            passwordConfirm: formData.confirmPassword,\n            resetToken: formData.resetToken\n        };\n        resetPasswordAsync(submitData).then((response) => {\n            if (response.status === 200) {\n                // Was successful. Inform user and navigate to login\n                window.location.href = '/login';\n                alert(strings.passwordWasReset); // Display message that password recet was successful\n            } else {\n                alert(strings.requestError) // Generic error since there is no error from the server\n            }\n        })\n    };\n    // Enables submit button if the fields are note empty and there is no errors in the form\n    const enableSubmit = () => {\n        if (formData.email.length>0 && formData.password.length>0 && formData.confirmPassword.length>0 &&formData.resetToken.length>0){\n            if (!formErrors.emailError && !formErrors.resetTokenError && !formErrors.passwordError && !formErrors.confirmPasswordError) {\n                setBtnDisable(false)\n            } else {\n                setBtnDisable(true)\n            }\n        } else {\n            setBtnDisable(true)\n        }\n    };\n    // Validates email input\n    const validateEmailField = () => {\n        const emailReqEx = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/; //eslint-disable-line\n        const emailError = \"emailError\";\n        if (emailReqEx.test(formData.email)) {\n            updateError(emailError, false);\n            updateErrorMsg(emailError, \"\");\n        } else {\n            updateError(emailError, true);\n            updateErrorMsg(strings.pleaseEnterEmail)\n        }\n    };\n    // Checks the password to be at least 5 characters\n    const validatePassword = () => {\n        const pwdError = \"passwordError\";\n        if (formData.password.length < 5) {\n            updateError(pwdError, true);\n            updateErrorMsg(pwdError, strings.passwordLengthError)\n        } else {\n            updateError(pwdError, false);\n            updateErrorMsg(pwdError, \"\")\n        }\n    };\n    // Checks that the passwords match\n    const validateConfirmPassword = () => {\n        const confPwdError = \"confirmPasswordError\";\n        if (formData.password === formData.confirmPassword && formData.password.length >= 5) {\n            updateError(confPwdError, false);\n            updateErrorMsg(confPwdError, \"\");\n        } else {\n            updateError(confPwdError, true);\n            updateErrorMsg(confPwdError, strings.passwordError);\n        }\n    };\n    // Just checks that the token field is not left empty\n    const validateTokenField = () => {\n        const tokenError = \"resetTokenError\";\n        if (formData.resetToken.length < 0) {\n            updateError(tokenError, true);\n            updateErrorMsg(tokenError, strings.cannotBeEmpty)\n        } else {\n            updateError(tokenError, false);\n            updateErrorMsg(tokenError, \"\")\n        }\n    };\n\n    return (\n        <ThemeProvider theme={FormTheme}>\n            <Container component=\"main\" maxWidth=\"xs\">\n                <div className=\"form\">\n                    <img src={require('../assets/logo_mycampus.webp')}\n                         alt={strings.logoAlt} className=\"logoImg\"/>\n                    <Typography component=\"h5\" color=\"secondary\" className=\"typo\" style={{paddingTop: \"1rem\"}}>\n                        {strings.resetPasswordText}\n                    </Typography>\n                    <form noValidate className=\"forgotPassform\">\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            color={\"secondary\"}\n                            id=\"email\"\n                            label={strings.emailAddress}\n                            name=\"email\"\n                            onChange={updateField}\n                            onBlur={validateEmailField}\n                            error={formErrors.emailError}\n                            helperText={formErrorMessages.emailError}\n                            value={formData.email}\n                            autoComplete={\"email\"}\n                        />\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            type=\"password\"\n                            color={\"secondary\"}\n                            id=\"password\"\n                            label={strings.password}\n                            name=\"password\"\n                            onChange={updateField}\n                            onBlur={validatePassword}\n                            error={formErrors.passwordError}\n                            helperText={formErrorMessages.passwordError}\n                            value={formData.password}\n                        />\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            type=\"password\"\n                            color={\"secondary\"}\n                            id=\"confirmPassword\"\n                            label={strings.confirmPassword}\n                            name=\"confirmPassword\"\n                            onChange={updateField}\n                            onBlur={validateConfirmPassword}\n                            error={formErrors.confirmPasswordError}\n                            helperText={formErrorMessages.confirmPasswordError}\n                            value={formData.confirmPassword}\n                        />\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            color={\"secondary\"}\n                            id=\"resetToken\"\n                            label={strings.resetToken}\n                            name=\"resetToken\"\n                            onChange={updateField}\n                            onBlur={validateTokenField}\n                            error={formErrors.resetTokenError}\n                            helperText={formErrorMessages.resetTokenError}\n                            value={formData.resetToken}\n                        />\n                        <Button fullWidth variant=\"contained\" color=\"primary\" disabled={btnDisable} onClick={() => {\n                            handleSubmit()\n                        }}>\n                            {strings.send}\n                        </Button>\n                        <Grid style={{padding: '1em'}}>\n                            <Grid item xs style={{padding: '1em'}}>\n                                <Link\n                                    onClick={() => {\n                                        window.location.href = '/login';\n                                    }}>\n                                    {strings.backToLogin}\n                                </Link>\n                            </Grid>\n                        </Grid>\n                    </form>\n                </div>\n            </Container>\n        </ThemeProvider>\n    )\n\n};\nexport default ResetPassword;\n","/*\n    This file contains the view for the home page.\n    Importing some elements from other files\n */\n/* eslint-disable no-unused-vars */\nimport MuiThemes from '../styles/muiThemes'\nimport React, {useState, useEffect} from 'react';\nimport {\n    Button,\n    Container,\n    ThemeProvider,\n    Typography,\n    TextField, Checkbox, Grid, Link,\n} from '@material-ui/core';\nimport strings from \"../localization\";\nimport API from \"../hooks/ApiHooks\";\nimport {navigate,useQueryParams} from 'hookrouter';\nimport LocalStorageOperations from \"../hooks/LocalStorageOperations\";\n\nconst AccountVerification = (props) =>{\n\n    const {FormTheme,setBackgroundBlue} = MuiThemes();\n    const [email, setEmail] = useState('');\n    const [token, setToken] = useState('');\n    const {confirmAccountAsync,resendEmailAsync} = API();\n    const {create, read, clear, del} = LocalStorageOperations();\n    const [queryParams] = useQueryParams();\n\n\n\n    // Sets background\n    useEffect(()=>{\n        setBackgroundBlue()\n    },[]); //eslint-disable-line\n\n    useEffect(()=>{//eslint-disable-line\n        const {\n            // Use object destructuring and a default value\n            // if the param is not yet present in the URL.\n            email = ''\n        } = queryParams;\n\n        setEmail(queryParams.email)\n    },[queryParams.email]); // eslint-disable-line\n\n\n    const handleSubmit = () =>{\n        const submitData = {\n            email: email,\n            token:token\n        };\n        confirmAccountAsync(submitData).then((result)=>{\n            if (result.status===200){\n                alert(\"Account confirmation was successful!\");\n                result.json().then((data)=>{\n                    const user = {username: data.username,token:data.token};\n                    create(JSON.stringify(user), 'user'); // Saves the users information as a json string inside LocalStorage\n                    window.location.href = '/home';\n                });\n            } else {\n                alert(\"Confirmation Failed\")\n            }\n        });\n\n    };\n\n    const resendEmail = () => {\n        resendEmailAsync({email:email}).then((result)=>{\n            if(result.status===200){\n                alert(\"Verification token was sent to your email\")\n            } else {\n                alert(\"Email wasn't sent. Make sure your email is correct in the Email field.\")\n            }\n        })\n    };\n\n    return(\n        <ThemeProvider theme={FormTheme}>\n            <Container component=\"main\" maxWidth=\"xs\">\n                <div className=\"form\">\n                    <img src={require('../assets/logo_mycampus.webp')}\n                         alt={strings.logoAlt} className=\"logoImg\"/>\n                    <Typography component=\"h5\" color=\"secondary\" className=\"typo\" style={{paddingTop:\"1rem\"}}>\n                        {strings.userVerification}\n                    </Typography>\n                    <form noValidate onSubmit={handleSubmit}>\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            color={\"secondary\"}\n                            id=\"email\"\n                            label={strings.emailAddress}\n                            name=\"email\"\n                            onChange={event => setEmail(event.target.value)}\n                            value={email}\n                            autoComplete={\"email\"}\n                        />\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            color={\"secondary\"}\n                            id=\"token\"\n                            label={strings.verificationToken}\n                            name=\"token\"\n                            onChange={event => setToken(event.target.value)}\n                            value={token}\n                        />\n                        <Button onClick={()=>{handleSubmit()}} fullWidth variant=\"contained\" color=\"primary\">\n                            {strings.send}\n                        </Button>\n                        <Grid style={{padding: '1em'}}>\n                            <Grid item xs style={{padding: '1em'}}>\n                                <Link\n                                    onClick={() => {window.location.href = '/login';}}>\n                                    {strings.backToLogin}\n                                </Link>\n                            </Grid>\n                            <Grid>\n                                <Link onClick={()=>{resendEmail()}}>\n                                    {strings.resend}\n                                </Link>\n                            </Grid>\n                        </Grid>\n                    </form>\n                </div>\n            </Container>\n        </ThemeProvider>\n    )\n};\nexport default AccountVerification\n","/*\n  This file contains the routes fo the app. If the app needs more navigation\n  the routes would be added here so that hookrouter can take advantage of them.\n  This export is used in App.js\n*/\n\nimport React from 'react';\nimport Home from '../views/home';\nimport Login from '../views/login';\nimport Info from '../views/info'\nimport P5 from '../views/p5';\nimport P10 from '../views/p10';\nimport Restaurant from '../views/restaurant';\nimport ForgotPassword from '../views/forgotPass'\nimport Register from \"../views/register\";\nimport AuthLoading from \"../views/authLoading\";\nimport P5MapView from \"../views/p5MapView\";\nimport P10MapView from \"../views/p10MapView\";\nimport ResetPassword from \"../views/resetPassword\";\nimport AccountVerification from \"../views/accountVerification\";\n\n// Navigation hookrouter, navigation url and the corresponding component\n// Used in App.js, routeResult\nconst routes = {\n  '/': ()=> <Home/>,\n  '/info': ()=> <Info/>,\n  '/home': () => <Home/>,\n  '/login': () => <Login/>,\n  '/p5': () => <P5/>,\n  '/p10': () => <P10/>,\n  '/restaurant': () => <Restaurant/>,\n  '/register': () => <Register/>,\n  '/forgot_password': () => <ForgotPassword/>,\n  '/auth':()=> <AuthLoading/>,\n  '/p5map': ()=> <P5MapView/>,\n  '/p10map': () => <P10MapView/>,\n  '/reset_password': (email) => <ResetPassword email={email}/>,\n  '/verify_account': (email)=> <AccountVerification email={email}/>\n};\n\n\nexport default routes;\n","import React from 'react';\n// UpdateDialog, shown when app updates\n\nconst UpdateDialog = (params) => {\n  return (\n      <div className=\"UpdatedRoot\">\n        <div className=\"AppUpdated\">\n          <h1 className=\"AppUpdatedHeading\">There is a new update,\n          press confirm to continue.</h1>\n          <button className=\"AppUpdatedButton\" onClick={params.onUpdate}>CONFIRM</button>\n        </div>\n      </div>\n\n\n  );\n};\nexport default UpdateDialog;","/*\n  This file contains the data update with Redux\n  Alpha phase\n */\nimport React, {useEffect} from 'react';\nimport {useDispatch} from 'react-redux';\nimport UpdateDialog from '../views/UpdateDialog';\n\n// Update app via redux\nconst UpdateApp = ({type, onUpdate}) => {\n  // Redux dispatch, type is either SW_INIT or SW_UPDATE, comes from Update.js when serviceworker is updated\n  const dispatch = useDispatch();\n  // Define parameters to be sent as params to UpdateDialog component\n  const params = {onUpdate}\n  useEffect(() => {\n    if (!onUpdate) {\n      // 2 second timeout and dispatch\n      const timer = setTimeout(() => {\n        dispatch({type});\n      }, 6000)\n      // Clear timeout so timer works correctly every time\n      return () => clearTimeout(timer)\n    }\n  }, []);// eslint-disable-line\n\n  return (\n        <UpdateDialog {...params}/>\n  )\n};\n\nexport default UpdateApp;","import React from 'react';\nimport {useSelector} from 'react-redux';\nimport Data from './hooks/Data';\nimport UpdateApp from './hooks/UpdateServiceWorker';\n\nconst {SW_INIT, SW_UPDATE} = Data();\n\nconst Update = () => {\n  // Defining constants for redux depending on serviceworker state\n  const isServiceWorkerInitialized = useSelector(\n      state => state.UpdateReducer.serviceWorkerInitialized);\n  const isServiceWorkerUpdated = useSelector(\n      state => state.UpdateReducer.serviceWorkerUpdated);\n  const serviceWorkerRegistration = useSelector(\n      state => state.UpdateReducer.serviceWorkerRegistration);\n  const updateServiceWorker = () => {\n    const registrationWaiting = serviceWorkerRegistration.waiting;\n    // If new update is waiting, reload current window with the new content\n    if (registrationWaiting) {\n      registrationWaiting.postMessage({type: 'SKIP_WAITING'});\n      registrationWaiting.addEventListener('statechange', e => {\n        if (e.target.state === 'activated') {\n          window.location.reload()\n        }\n      });\n    }\n  };\n  return (\n      // UpdateApp in UpdateServiceWorker.js, SW_INIT and SW_UPDATE is used with redux dispatch depending on serviceworker state\n      <div>\n        {isServiceWorkerInitialized && (\n            <UpdateApp\n                type={SW_INIT}\n            />\n        )}\n        {isServiceWorkerUpdated && (\n            <UpdateApp\n                type={SW_UPDATE}\n                onUpdate={() => updateServiceWorker()}\n            />\n        )}\n\n      </div>\n\n  );\n};\nexport default Update;\n","/*\n    This is the Main app itself.\n    The routes are nested here.\n*/\nimport React from 'react';\nimport {useRoutes} from 'hookrouter';\nimport './styles/App.css';\nimport routes from './hooks/Routes';\nimport Update from './Update';\n\nconst App = () => {\n  const routeResult = useRoutes(routes);\n  // Update component is used with App-div to enable serviceworker automatic updates\n  // routeResult handles the navigation using hookrouter, check Routes.js for editing\n  return (\n      <div className=\"App\">\n        <Update/>\n        {routeResult}\n      </div>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\"New content is available and will be used when all ' +\\n\" +\n                    \"                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.\")\n                ;\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n            'No internet connection found. App is running in offline mode.'\n        );\n      });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n  }\n}\n","import Data from './Data';\n\nconst { FETCH_HEATMAP_BEGIN, FETCH_HEATMAP_SUCCESS, FETCH_HEATMAP_FAILURE } = Data();\n\nexport default function HeatMapReducer(state = {\n  map: null,\n  loading: false,\n  error: null\n}, action) {\n  switch (action.type) {\n    case FETCH_HEATMAP_BEGIN:\n      return {\n        // Mark the state as \"loading\"\n        // Reset errors\n        ...state,\n        loading: true,\n        error: null\n      };\n// Serviceworker update\n    case FETCH_HEATMAP_SUCCESS:\n      return {\n        // Done, set loading to false\n        // Replace heatmap from the api\n        ...state,\n        loading: false,\n        map: action.payload.heatmap\n      };\n    case FETCH_HEATMAP_FAILURE:\n      return {\n        // Fetch request failed, save error. Heatmap is set to null since\n        // it does not exist\n        ...state,\n        loading: false,\n        error: action.payload.error,\n        map: null\n      };\n    default:\n      return state;\n  }\n}\n","/*\n    This file contains the service worker for the app\n */\nimport Data from './Data';\n\nconst {SW_INIT, SW_UPDATE} = Data();\n\n// Switch cases for redux store state change\nexport default function updateReducer(\n    state = { serviceWorkerInitialized: false, serviceWorkerUpdated: false, serviceWorkerRegistration: null}, action) {\n  switch (action.type) {\n      // Serviceworker initialization\n    case SW_INIT:\n      return {\n        ...state,\n        serviceWorkerInitialized: !state.serviceWorkerInitialized,\n      };\n      // Serviceworker update\n    case SW_UPDATE:\n      return {\n        ...state,\n        serviceWorkerUpdated: !state.serviceWorkerUpdated,\n        serviceWorkerRegistration: action.payload,\n      };\n\n    default:\n      return state;\n  }\n}\n\n\n\n\n","import { combineReducers } from 'redux';\nimport HeatMapReducer from './HeatMapReducer'\nimport UpdateReducer from './UpdateReducer'\n\n// combines update and heatmap reducers\nexport default combineReducers({ HeatMapReducer, UpdateReducer})","/*\n    This file handles that the app is placed inside the index.html\n*/\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {CssBaseline} from '@material-ui/core';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport Data from './hooks/Data'\nimport {applyMiddleware, createStore} from 'redux';\nimport RootReducer from './hooks/RootReducer';\nimport thunk from 'redux-thunk';\nconst {SW_INIT, SW_UPDATE} = Data();\nconst store = createStore(RootReducer,\n    applyMiddleware(thunk));\n\nReactDOM.render(\n    // Provider makes redux store available to any nested component\n    <Provider store={store}>\n      <CssBaseline/>\n      <App/>\n    </Provider>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register({\n  onSuccess: () => store.dispatch({type: SW_INIT}),\n  onUpdate: registration => store.dispatch(\n      {type: SW_UPDATE, payload: registration}),\n});\n\n","module.exports = __webpack_public_path__ + \"static/media/logo_mycampus.e8cf586f.webp\";"],"sourceRoot":""}